{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a WordPress AI Content Management System built with a full-stack TypeScript architecture. The application automates SEO-optimized content generation and analysis for multiple WordPress websites using AI models like GPT-4o and Claude-3. It provides a comprehensive dashboard for managing website connections, generating AI-powered content, performing SEO analysis, scheduling posts, and generating client reports.\n\nKey features include:\n- Multi-website WordPress management with automated content posting\n- AI-powered content generation with SEO optimization\n- Automated SEO analysis and issue detection with auto-fix capabilities\n- Content scheduling and publishing automation\n- Performance tracking and client reporting\n- Activity logging and audit trails\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite for development and building\n- **Routing**: Wouter for client-side routing with simple declarative routes\n- **State Management**: TanStack Query (React Query v5) for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui component system for consistent design\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **Forms**: React Hook Form with Zod for validation and type safety\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **API Design**: RESTful API with structured error handling and request logging\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Schema Validation**: Zod schemas shared between client and server for consistent validation\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL configured through Neon Database serverless connection\n- **ORM Configuration**: Drizzle with PostgreSQL dialect for schema migrations and queries\n- **Schema Design**: Normalized tables for users, websites, content, SEO reports, activity logs, and client reports\n- **Storage Interface**: Abstract storage interface with in-memory implementation for development\n\n## Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store using connect-pg-simple\n- **User Model**: Simple username/password authentication with hashed passwords\n- **Access Control**: Route-level protection with user session validation\n\n## AI Integration Architecture\n- **Primary AI Service**: OpenAI GPT-4o for content generation and SEO optimization\n- **Content Generation**: Structured prompts with JSON response format for consistent output\n- **SEO Analysis**: Custom SEO service that simulates PageSpeed Insights and technical analysis\n- **Model Selection**: Configurable AI models per website (GPT-4o, Claude-3, etc.)\n\n## External Service Integrations\n- **WordPress Integration**: WordPress REST API connections for automated content posting\n- **SEO Tools**: Simulated PageSpeed Insights API for performance analysis\n- **Content Scheduling**: Built-in scheduling system with automated publishing\n\n## Development and Build System\n- **Development Server**: Vite with HMR and Express middleware integration\n- **Build Process**: Vite for frontend bundling, esbuild for server bundling\n- **Type Checking**: TypeScript strict mode with shared types between frontend and backend\n- **Code Organization**: Monorepo structure with shared schemas and clear separation of concerns\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Hook Form, TanStack Query\n- **Backend Framework**: Express.js with TypeScript support\n- **Database**: PostgreSQL via Neon Database serverless, Drizzle ORM\n- **Build Tools**: Vite, esbuild, TypeScript compiler\n\n## UI and Styling\n- **Component Library**: Radix UI primitives for accessible components\n- **Design System**: shadcn/ui component collection with Tailwind CSS\n- **Icons**: Lucide React for consistent iconography\n- **Styling**: Tailwind CSS with PostCSS and Autoprefixer\n\n## AI and External Services\n- **OpenAI**: Official OpenAI SDK for GPT-4o content generation\n- **Session Storage**: connect-pg-simple for PostgreSQL session management\n- **Date Handling**: date-fns for date formatting and manipulation\n\n## Development Tools\n- **Type Safety**: Zod for runtime validation and TypeScript integration\n- **Form Handling**: React Hook Form with Zod resolvers\n- **Development**: tsx for TypeScript execution, Replit-specific plugins\n\n## Third-party Integrations\n- **WordPress**: REST API integration for content publishing\n- **Charts**: Chart.js with React wrapper for performance visualization\n- **Carousel**: Embla Carousel for content presentation\n- **Utilities**: clsx and class-variance-authority for conditional styling","size_bytes":4890},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        inter: ['Inter', 'sans-serif'],\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"var(--primary-50)\",\n          100: \"var(--primary-100)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n          100: \"var(--secondary-100)\",\n          400: \"var(--secondary-400)\",\n          500: \"var(--secondary-500)\",\n          700: \"var(--secondary-700)\",\n          800: \"var(--secondary-800)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3184},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { aiService } from \"./services/ai-service\";\nimport { seoService } from \"./services/seo-service\";\nimport { approvalWorkflowService } from \"./services/approval-workflow\";\nimport { insertWebsiteSchema, insertContentSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Websites routes\n  app.get(\"/api/websites\", async (req, res) => {\n    try {\n      const websites = await storage.getWebsites();\n      res.json(websites);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch websites\" });\n    }\n  });\n\n  app.get(\"/api/websites/:id\", async (req, res) => {\n    try {\n      const website = await storage.getWebsite(req.params.id);\n      if (!website) {\n        return res.status(404).json({ message: \"Website not found\" });\n      }\n      res.json(website);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch website\" });\n    }\n  });\n\n  app.post(\"/api/websites\", async (req, res) => {\n    try {\n      const validatedData = insertWebsiteSchema.parse(req.body);\n      const website = await storage.createWebsite(validatedData);\n      res.status(201).json(website);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid website data\" });\n    }\n  });\n\n  app.put(\"/api/websites/:id\", async (req, res) => {\n    try {\n      const website = await storage.updateWebsite(req.params.id, req.body);\n      if (!website) {\n        return res.status(404).json({ message: \"Website not found\" });\n      }\n      res.json(website);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update website\" });\n    }\n  });\n\n  app.delete(\"/api/websites/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteWebsite(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Website not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete website\" });\n    }\n  });\n\n  // Content routes\n  app.get(\"/api/websites/:id/content\", async (req, res) => {\n    try {\n      const content = await storage.getContentByWebsite(req.params.id);\n      res.json(content);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch content\" });\n    }\n  });\n\n  app.post(\"/api/content/generate\", async (req, res) => {\n    try {\n      const { websiteId, topic, keywords, tone, wordCount, brandVoice, targetAudience, eatCompliance } = req.body;\n      \n      if (!websiteId || !topic) {\n        return res.status(400).json({ message: \"Website ID and topic are required\" });\n      }\n\n      const result = await aiService.generateContent({\n        websiteId,\n        topic,\n        keywords: keywords || [],\n        tone: tone || \"professional\",\n        wordCount: wordCount || 800,\n        seoOptimized: true,\n        brandVoice: brandVoice || \"professional\",\n        targetAudience,\n        eatCompliance: eatCompliance || false\n      });\n\n      // Save the generated content (defaults to pending_approval)\n      const content = await storage.createContent({\n        websiteId,\n        title: result.title,\n        body: result.content,\n        excerpt: result.excerpt,\n        metaDescription: result.metaDescription,\n        metaTitle: result.metaTitle,\n        aiModel: \"gpt-4o\",\n        seoKeywords: result.keywords,\n        seoScore: result.seoScore,\n        readabilityScore: result.readabilityScore,\n        brandVoiceScore: result.brandVoiceScore,\n        eatCompliance: result.eatCompliance,\n      });\n\n      // Log the activity\n      await storage.createActivityLog({\n        websiteId,\n        type: \"content_generated\",\n        description: `AI content generated: \"${result.title}\" (${result.tokensUsed} tokens, $${result.costUsd})`,\n        metadata: { \n          contentId: content.id, \n          aiModel: \"gpt-4o\",\n          tokensUsed: result.tokensUsed,\n          costUsd: result.costUsd,\n          qualityChecks: result.qualityChecks\n        }\n      });\n\n      res.json({ content, aiResult: result });\n    } catch (error) {\n      console.error(\"Content generation error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to generate content\" });\n    }\n  });\n\n  app.post(\"/api/content/:id/publish\", async (req, res) => {\n    try {\n      const content = await storage.updateContent(req.params.id, {\n        status: \"published\",\n        publishDate: new Date()\n      });\n\n      if (!content) {\n        return res.status(404).json({ message: \"Content not found\" });\n      }\n\n      // Log the activity\n      await storage.createActivityLog({\n        websiteId: content.websiteId,\n        type: \"content_published\",\n        description: `Content published: \"${content.title}\"`,\n        metadata: { contentId: content.id }\n      });\n\n      res.json(content);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to publish content\" });\n    }\n  });\n\n  // SEO routes\n  app.get(\"/api/websites/:id/seo-reports\", async (req, res) => {\n    try {\n      const reports = await storage.getSeoReportsByWebsite(req.params.id);\n      res.json(reports);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch SEO reports\" });\n    }\n  });\n\n  app.post(\"/api/websites/:id/seo-analysis\", async (req, res) => {\n    try {\n      const website = await storage.getWebsite(req.params.id);\n      if (!website) {\n        return res.status(404).json({ message: \"Website not found\" });\n      }\n\n      const analysis = await seoService.analyzeWebsite(website.url);\n      \n      // Save the report\n      const report = await storage.createSeoReport({\n        websiteId: req.params.id,\n        score: analysis.score,\n        issues: analysis.issues,\n        recommendations: analysis.recommendations,\n        pageSpeedScore: analysis.pageSpeedScore\n      });\n\n      // Update website SEO score\n      await storage.updateWebsite(req.params.id, {\n        seoScore: analysis.score\n      });\n\n      // Log the activity\n      await storage.createActivityLog({\n        websiteId: req.params.id,\n        type: \"seo_analysis\",\n        description: `SEO analysis completed (Score: ${analysis.score})`,\n        metadata: { reportId: report.id, score: analysis.score }\n      });\n\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"SEO analysis error:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to perform SEO analysis\" });\n    }\n  });\n\n  app.post(\"/api/websites/:id/seo-autofix\", async (req, res) => {\n    try {\n      const { issueType } = req.body;\n      const result = await seoService.performAutoFix(req.params.id, issueType);\n      \n      if (result.success) {\n        await storage.createActivityLog({\n          websiteId: req.params.id,\n          type: \"seo_autofix\",\n          description: `Auto-fix applied: ${issueType}`,\n          metadata: { issueType, success: true }\n        });\n      }\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to apply auto-fix\" });\n    }\n  });\n\n  // Activity logs\n  app.get(\"/api/activity-logs\", async (req, res) => {\n    try {\n      const websiteId = req.query.websiteId as string;\n      const logs = await storage.getActivityLogs(websiteId);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch activity logs\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const websites = await storage.getWebsites();\n      const allLogs = await storage.getActivityLogs();\n      \n      const stats = {\n        activeWebsites: websites.length,\n        contentGenerated: allLogs.filter(log => log.type === \"content_generated\" || log.type === \"content_published\").length,\n        avgSeoScore: Math.round(websites.reduce((sum, w) => sum + w.seoScore, 0) / websites.length) || 0,\n        scheduledPosts: allLogs.filter(log => log.type === \"content_scheduled\").length\n      };\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Performance data for charts\n  app.get(\"/api/dashboard/performance\", async (req, res) => {\n    try {\n      // Generate mock performance data for the last 30 days\n      const days = 7;\n      const data = [];\n      const baseScore = 75;\n      \n      for (let i = days - 1; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const variation = Math.random() * 10 - 5; // +/- 5 points\n        const score = Math.max(70, Math.min(100, baseScore + variation + (i * 2))); // Slight upward trend\n        \n        data.push({\n          date: date.toISOString().split('T')[0],\n          score: Math.round(score)\n        });\n      }\n\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch performance data\" });\n    }\n  });\n\n  // Content Approval Workflow Routes\n  app.get(\"/api/content/pending-approval\", async (req, res) => {\n    try {\n      const pendingContent = await approvalWorkflowService.getPendingApprovals();\n      res.json(pendingContent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pending approvals\" });\n    }\n  });\n\n  app.post(\"/api/content/:id/submit-for-approval\", async (req, res) => {\n    try {\n      const result = await approvalWorkflowService.submitForApproval(req.params.id);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to submit for approval\" });\n    }\n  });\n\n  app.post(\"/api/content/:id/approve\", async (req, res) => {\n    try {\n      const { reviewerId, feedback, qualityScore } = req.body;\n      \n      if (!reviewerId) {\n        return res.status(400).json({ message: \"Reviewer ID is required\" });\n      }\n\n      const result = await approvalWorkflowService.processApproval({\n        contentId: req.params.id,\n        reviewerId,\n        decision: \"approved\",\n        feedback,\n        qualityScore\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to approve content\" });\n    }\n  });\n\n  app.post(\"/api/content/:id/reject\", async (req, res) => {\n    try {\n      const { reviewerId, feedback, qualityScore } = req.body;\n      \n      if (!reviewerId) {\n        return res.status(400).json({ message: \"Reviewer ID is required\" });\n      }\n\n      const result = await approvalWorkflowService.processApproval({\n        contentId: req.params.id,\n        reviewerId,\n        decision: \"rejected\",\n        feedback,\n        qualityScore\n      });\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to reject content\" });\n    }\n  });\n\n  app.post(\"/api/content/:id/publish\", async (req, res) => {\n    try {\n      const { publishNow, scheduledDate, performBackup } = req.body;\n      \n      const result = await approvalWorkflowService.publishApprovedContent(\n        req.params.id,\n        {\n          publishNow: publishNow || false,\n          scheduledDate: scheduledDate ? new Date(scheduledDate) : undefined,\n          performBackup: performBackup || true\n        }\n      );\n\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to publish content\" });\n    }\n  });\n\n  // Emergency Controls\n  app.post(\"/api/websites/:id/emergency-stop\", async (req, res) => {\n    try {\n      const { reason } = req.body;\n      \n      if (!reason) {\n        return res.status(400).json({ message: \"Emergency stop reason is required\" });\n      }\n\n      const result = await approvalWorkflowService.emergencyStop(req.params.id, reason);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to activate emergency stop\" });\n    }\n  });\n\n  // AI Usage Tracking\n  app.get(\"/api/ai-usage/:websiteId\", async (req, res) => {\n    try {\n      const usage = await storage.aiUsageTracking\n        .select()\n        .from(storage.aiUsageTracking)\n        .where(eq(storage.aiUsageTracking.websiteId, req.params.websiteId))\n        .orderBy(desc(storage.aiUsageTracking.createdAt))\n        .limit(100);\n      \n      res.json(usage);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch AI usage data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12500},"server/storage.ts":{"content":"import { \n  users,\n  websites,\n  content,\n  seoReports,\n  activityLogs,\n  clientReports,\n  contentApprovals,\n  securityAudits,\n  aiUsageTracking,\n  seoAudits,\n  contentSchedule,\n  backups,\n  type User, \n  type UpsertUser,\n  type InsertUser, \n  type Website, \n  type InsertWebsite,\n  type Content,\n  type InsertContent,\n  type SeoReport,\n  type InsertSeoReport,\n  type ActivityLog,\n  type InsertActivityLog,\n  type ClientReport,\n  type InsertClientReport,\n  type ContentApproval,\n  type InsertContentApproval,\n  type SecurityAudit,\n  type InsertSecurityAudit,\n  type AiUsageTracking,\n  type InsertAiUsageTracking,\n  type SeoAudit,\n  type InsertSeoAudit,\n  type ContentSchedule,\n  type InsertContentSchedule,\n  type Backup,\n  type InsertBackup\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\nimport { wordPressAuthService } from \"./services/wordpress-auth\";\n\nexport interface IStorage {\n  // Users (Required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Websites\n  getWebsites(): Promise<Website[]>;\n  getWebsite(id: string): Promise<Website | undefined>;\n  createWebsite(website: InsertWebsite): Promise<Website>;\n  updateWebsite(id: string, website: Partial<Website>): Promise<Website | undefined>;\n  deleteWebsite(id: string): Promise<boolean>;\n\n  // Content\n  getContentByWebsite(websiteId: string): Promise<Content[]>;\n  getContent(id: string): Promise<Content | undefined>;\n  createContent(content: InsertContent): Promise<Content>;\n  updateContent(id: string, content: Partial<Content>): Promise<Content | undefined>;\n  getPendingApprovalContent(): Promise<Content[]>;\n\n  // SEO Reports\n  getSeoReportsByWebsite(websiteId: string): Promise<SeoReport[]>;\n  getLatestSeoReport(websiteId: string): Promise<SeoReport | undefined>;\n  createSeoReport(report: InsertSeoReport): Promise<SeoReport>;\n\n  // Activity Logs\n  getActivityLogs(websiteId?: string): Promise<ActivityLog[]>;\n  createActivityLog(log: InsertActivityLog): Promise<ActivityLog>;\n\n  // Client Reports\n  getClientReports(websiteId: string): Promise<ClientReport[]>;\n  createClientReport(report: InsertClientReport): Promise<ClientReport>;\n\n  // Enhanced features\n  createContentApproval(approval: InsertContentApproval): Promise<ContentApproval>;\n  createSecurityAudit(audit: InsertSecurityAudit): Promise<SecurityAudit>;\n  trackAiUsage(usage: InsertAiUsageTracking): Promise<AiUsageTracking>;\n  createSeoAudit(audit: InsertSeoAudit): Promise<SeoAudit>;\n  getContentSchedule(websiteId: string): Promise<ContentSchedule[]>;\n  createContentSchedule(schedule: InsertContentSchedule): Promise<ContentSchedule>;\n  createBackup(backup: InsertBackup): Promise<Backup>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Initialize with sample data if needed\n    this.initializeSampleData();\n  }\n\n  private async initializeSampleData() {\n    try {\n      // Check if sample data already exists\n      const existingWebsites = await db.select().from(websites).limit(1);\n      if (existingWebsites.length > 0) return;\n\n      // Create sample websites with secure Application Password format\n      const sampleWebsites = [\n        {\n          name: \"TechBlog.com\",\n          url: \"https://techblog.com\",\n          wpApplicationName: \"AI Content Manager - TechBlog\",\n          wpApplicationPassword: \"demo-encrypted-app-password-1\", // Would be encrypted in real use\n          wpUsername: \"admin\",\n          aiModel: \"gpt-4o\",\n          autoPosting: false, // Default to manual approval\n          requireApproval: true,\n          status: \"active\",\n          seoScore: 92,\n          contentCount: 24,\n          brandVoice: \"technical\",\n          targetAudience: \"developers\",\n        },\n        {\n          name: \"E-Commerce.store\",\n          url: \"https://e-commerce.store\",\n          wpApplicationName: \"AI Content Manager - ECommerce\",\n          wpApplicationPassword: \"demo-encrypted-app-password-2\",\n          wpUsername: \"admin\",\n          aiModel: \"gpt-4o\",\n          autoPosting: false,\n          requireApproval: true,\n          status: \"processing\",\n          seoScore: 78,\n          contentCount: 18,\n          brandVoice: \"friendly\",\n          targetAudience: \"online shoppers\",\n        },\n        {\n          name: \"RestaurantSite.com\",\n          url: \"https://restaurantsite.com\",\n          wpApplicationName: \"AI Content Manager - Restaurant\",\n          wpApplicationPassword: \"demo-encrypted-app-password-3\",\n          wpUsername: \"admin\",\n          aiModel: \"claude-3\",\n          autoPosting: false,\n          requireApproval: true,\n          status: \"issues\",\n          seoScore: 65,\n          contentCount: 12,\n          brandVoice: \"warm\",\n          targetAudience: \"local diners\",\n        },\n      ];\n\n      await db.insert(websites).values(sampleWebsites);\n\n      // Sample activity logs\n      const sampleActivities = [\n        {\n          websiteId: null, // System-wide activity\n          type: \"system_init\",\n          description: \"WordPress AI automation platform initialized\",\n          metadata: { version: \"2.0\", secure: true },\n        },\n        {\n          websiteId: null,\n          type: \"security_upgrade\",\n          description: \"Upgraded to WordPress Application Passwords authentication\",\n          metadata: { previousAuth: \"username/password\", newAuth: \"application_passwords\" },\n        },\n      ];\n\n      await db.insert(activityLogs).values(sampleActivities);\n    } catch (error) {\n      console.error('Failed to initialize sample data:', error);\n    }\n  }\n\n  // Users (Required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: userData,\n      })\n      .returning();\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Websites\n  async getWebsites(): Promise<Website[]> {\n    return await db\n      .select()\n      .from(websites)\n      .orderBy(desc(websites.updatedAt));\n  }\n\n  async getWebsite(id: string): Promise<Website | undefined> {\n    const [website] = await db.select().from(websites).where(eq(websites.id, id));\n    return website;\n  }\n\n  async createWebsite(insertWebsite: InsertWebsite): Promise<Website> {\n    // Encrypt the application password before storing\n    const encryptedPassword = wordPressAuthService.encryptCredentials({\n      applicationName: insertWebsite.wpApplicationName,\n      applicationPassword: insertWebsite.wpApplicationPassword,\n      username: insertWebsite.wpUsername || 'admin'\n    });\n\n    const [website] = await db\n      .insert(websites)\n      .values({\n        ...insertWebsite,\n        wpApplicationPassword: encryptedPassword.encrypted,\n        status: \"active\",\n        seoScore: 0,\n        contentCount: 0,\n      })\n      .returning();\n    \n    // Log activity\n    await this.createActivityLog({\n      websiteId: website.id,\n      type: \"website_connected\",\n      description: `Website connected: ${website.name}`,\n      metadata: { url: website.url, secure: true },\n    });\n\n    // Create security audit log\n    await this.createSecurityAudit({\n      websiteId: website.id,\n      action: \"website_connection\",\n      success: true,\n      metadata: { \n        authType: \"application_password\", \n        applicationName: insertWebsite.wpApplicationName \n      },\n    });\n\n    return website;\n  }\n\n  async updateWebsite(id: string, updates: Partial<Website>): Promise<Website | undefined> {\n    const [website] = await db\n      .update(websites)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(websites.id, id))\n      .returning();\n    return website;\n  }\n\n  async deleteWebsite(id: string): Promise<boolean> {\n    const result = await db.delete(websites).where(eq(websites.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Content\n  async getContentByWebsite(websiteId: string): Promise<Content[]> {\n    return await db\n      .select()\n      .from(content)\n      .where(eq(content.websiteId, websiteId))\n      .orderBy(desc(content.createdAt));\n  }\n\n  async getContent(id: string): Promise<Content | undefined> {\n    const [contentItem] = await db.select().from(content).where(eq(content.id, id));\n    return contentItem;\n  }\n\n  async getPendingApprovalContent(): Promise<Content[]> {\n    return await db\n      .select()\n      .from(content)\n      .where(eq(content.status, \"pending_approval\"))\n      .orderBy(desc(content.createdAt));\n  }\n\n  async createContent(insertContent: InsertContent): Promise<Content> {\n    const [contentItem] = await db\n      .insert(content)\n      .values({\n        ...insertContent,\n        status: \"pending_approval\", // Default to requiring approval\n      })\n      .returning();\n    return contentItem;\n  }\n\n  async updateContent(id: string, updates: Partial<Content>): Promise<Content | undefined> {\n    const [contentItem] = await db\n      .update(content)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(content.id, id))\n      .returning();\n    return contentItem;\n  }\n\n  // SEO Reports\n  async getSeoReportsByWebsite(websiteId: string): Promise<SeoReport[]> {\n    return await db\n      .select()\n      .from(seoReports)\n      .where(eq(seoReports.websiteId, websiteId))\n      .orderBy(desc(seoReports.createdAt));\n  }\n\n  async getLatestSeoReport(websiteId: string): Promise<SeoReport | undefined> {\n    const [report] = await db\n      .select()\n      .from(seoReports)\n      .where(eq(seoReports.websiteId, websiteId))\n      .orderBy(desc(seoReports.createdAt))\n      .limit(1);\n    return report;\n  }\n\n  async createSeoReport(insertReport: InsertSeoReport): Promise<SeoReport> {\n    const [report] = await db\n      .insert(seoReports)\n      .values(insertReport)\n      .returning();\n    return report;\n  }\n\n  // Activity Logs\n  async getActivityLogs(websiteId?: string): Promise<ActivityLog[]> {\n    if (websiteId) {\n      return await db\n        .select()\n        .from(activityLogs)\n        .where(eq(activityLogs.websiteId, websiteId))\n        .orderBy(desc(activityLogs.createdAt));\n    }\n    \n    return await db\n      .select()\n      .from(activityLogs)\n      .orderBy(desc(activityLogs.createdAt));\n  }\n\n  async createActivityLog(insertLog: InsertActivityLog): Promise<ActivityLog> {\n    const [log] = await db\n      .insert(activityLogs)\n      .values(insertLog)\n      .returning();\n    return log;\n  }\n\n  // Client Reports\n  async getClientReports(websiteId: string): Promise<ClientReport[]> {\n    return await db\n      .select()\n      .from(clientReports)\n      .where(eq(clientReports.websiteId, websiteId))\n      .orderBy(desc(clientReports.generatedAt));\n  }\n\n  async createClientReport(insertReport: InsertClientReport): Promise<ClientReport> {\n    const [report] = await db\n      .insert(clientReports)\n      .values(insertReport)\n      .returning();\n    return report;\n  }\n\n  // Enhanced Security and Management Features\n  async createContentApproval(approval: InsertContentApproval): Promise<ContentApproval> {\n    const [approvalRecord] = await db\n      .insert(contentApprovals)\n      .values(approval)\n      .returning();\n    return approvalRecord;\n  }\n\n  async createSecurityAudit(audit: InsertSecurityAudit): Promise<SecurityAudit> {\n    const [auditRecord] = await db\n      .insert(securityAudits)\n      .values(audit)\n      .returning();\n    return auditRecord;\n  }\n\n  async trackAiUsage(usage: InsertAiUsageTracking): Promise<AiUsageTracking> {\n    const [usageRecord] = await db\n      .insert(aiUsageTracking)\n      .values(usage)\n      .returning();\n    return usageRecord;\n  }\n\n  async createSeoAudit(audit: InsertSeoAudit): Promise<SeoAudit> {\n    const [auditRecord] = await db\n      .insert(seoAudits)\n      .values(audit)\n      .returning();\n    return auditRecord;\n  }\n\n  async getContentSchedule(websiteId: string): Promise<ContentSchedule[]> {\n    return await db\n      .select()\n      .from(contentSchedule)\n      .where(eq(contentSchedule.websiteId, websiteId))\n      .orderBy(desc(contentSchedule.scheduledDate));\n  }\n\n  async createContentSchedule(schedule: InsertContentSchedule): Promise<ContentSchedule> {\n    const [scheduleRecord] = await db\n      .insert(contentSchedule)\n      .values(schedule)\n      .returning();\n    return scheduleRecord;\n  }\n\n  async createBackup(backup: InsertBackup): Promise<Backup> {\n    const [backupRecord] = await db\n      .insert(backups)\n      .values(backup)\n      .returning();\n    return backupRecord;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13175},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const websites = pgTable(\"websites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  url: text(\"url\").notNull(),\n  // Secure WordPress Application Password authentication\n  wpApplicationName: text(\"wp_application_name\").notNull(),\n  wpApplicationPassword: text(\"wp_application_password\").notNull(), // Encrypted\n  wpUsername: text(\"wp_username\"), // For display only, not authentication\n  \n  // AI and automation settings\n  aiModel: text(\"ai_model\").notNull().default(\"gpt-4o\"),\n  autoPosting: boolean(\"auto_posting\").notNull().default(false), // Default to manual approval\n  requireApproval: boolean(\"require_approval\").notNull().default(true),\n  \n  // Performance and status\n  status: text(\"status\").notNull().default(\"active\"), // active, processing, issues, suspended\n  seoScore: integer(\"seo_score\").notNull().default(0),\n  contentCount: integer(\"content_count\").notNull().default(0),\n  \n  // Security and access control\n  allowedIPs: text(\"allowed_ips\").array().default([]),\n  apiRateLimit: integer(\"api_rate_limit\").notNull().default(100), // requests per hour\n  \n  // Content quality settings\n  brandVoice: text(\"brand_voice\").default(\"professional\"),\n  contentGuidelines: text(\"content_guidelines\"),\n  targetAudience: text(\"target_audience\"),\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const content = pgTable(\"content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  websiteId: varchar(\"website_id\").notNull().references(() => websites.id),\n  title: text(\"title\").notNull(),\n  body: text(\"body\").notNull(),\n  excerpt: text(\"excerpt\"),\n  metaDescription: text(\"meta_description\"),\n  metaTitle: text(\"meta_title\"),\n  \n  // Content approval and workflow\n  status: text(\"status\").notNull().default(\"pending_approval\"), // pending_approval, draft, approved, generating, published, scheduled, rejected\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  \n  // AI and SEO data\n  aiModel: text(\"ai_model\").notNull(),\n  seoKeywords: text(\"seo_keywords\").array().notNull().default([]),\n  seoScore: integer(\"seo_score\").default(0),\n  readabilityScore: integer(\"readability_score\").default(0),\n  plagiarismScore: integer(\"plagiarism_score\").default(0),\n  \n  // Content quality and brand compliance\n  brandVoiceScore: integer(\"brand_voice_score\").default(0),\n  factCheckStatus: text(\"fact_check_status\").default(\"pending\"), // pending, verified, flagged\n  eatCompliance: boolean(\"eat_compliance\").default(false),\n  \n  // Scheduling and publishing\n  publishDate: timestamp(\"publish_date\"),\n  wordpressPostId: integer(\"wordpress_post_id\"),\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const seoReports = pgTable(\"seo_reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  websiteId: varchar(\"website_id\").notNull().references(() => websites.id),\n  score: integer(\"score\").notNull(),\n  issues: jsonb(\"issues\").notNull().default([]),\n  recommendations: jsonb(\"recommendations\").notNull().default([]),\n  pageSpeedScore: integer(\"page_speed_score\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  websiteId: varchar(\"website_id\").references(() => websites.id),\n  type: text(\"type\").notNull(), // content_generated, seo_analysis, issue_detected, etc.\n  description: text(\"description\").notNull(),\n  metadata: jsonb(\"metadata\").notNull().default({}),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const clientReports = pgTable(\"client_reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  websiteId: varchar(\"website_id\").notNull().references(() => websites.id),\n  reportType: text(\"report_type\").notNull(), // weekly, monthly, quarterly\n  period: text(\"period\").notNull(),\n  data: jsonb(\"data\").notNull(),\n  insights: jsonb(\"insights\").notNull().default([]),\n  roiData: jsonb(\"roi_data\").notNull().default({}),\n  whiteLabelConfig: jsonb(\"white_label_config\").default({}),\n  generatedAt: timestamp(\"generated_at\").notNull().defaultNow(),\n});\n\n// New tables for enhanced functionality\nexport const contentApprovals = pgTable(\"content_approvals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contentId: varchar(\"content_id\").notNull().references(() => content.id),\n  reviewerId: varchar(\"reviewer_id\").notNull().references(() => users.id),\n  status: text(\"status\").notNull(), // approved, rejected, needs_revision\n  feedback: text(\"feedback\"),\n  qualityScore: integer(\"quality_score\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const securityAudits = pgTable(\"security_audits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  websiteId: varchar(\"website_id\").references(() => websites.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(), // login, content_publish, seo_change, etc.\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  success: boolean(\"success\").notNull(),\n  metadata: jsonb(\"metadata\").notNull().default({}),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const aiUsageTracking = pgTable(\"ai_usage_tracking\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  websiteId: varchar(\"website_id\").notNull().references(() => websites.id),\n  model: text(\"model\").notNull(),\n  tokensUsed: integer(\"tokens_used\").notNull(),\n  costUsd: integer(\"cost_usd\").notNull(), // Store as cents\n  operation: text(\"operation\").notNull(), // content_generation, seo_analysis, etc.\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const seoAudits = pgTable(\"seo_audits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  websiteId: varchar(\"website_id\").notNull().references(() => websites.id),\n  url: text(\"url\").notNull(),\n  auditType: text(\"audit_type\").notNull(), // technical, content, performance\n  findings: jsonb(\"findings\").notNull().default([]),\n  autoFixApplied: boolean(\"auto_fix_applied\").default(false),\n  autoFixResults: jsonb(\"auto_fix_results\").default([]),\n  coreWebVitals: jsonb(\"core_web_vitals\").default({}),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const contentSchedule = pgTable(\"content_schedule\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  websiteId: varchar(\"website_id\").notNull().references(() => websites.id),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  topic: text(\"topic\").notNull(),\n  keywords: text(\"keywords\").array().notNull().default([]),\n  status: text(\"status\").notNull().default(\"planned\"), // planned, generating, ready, published\n  contentId: varchar(\"content_id\").references(() => content.id),\n  abTestVariant: text(\"ab_test_variant\"), // A, B, or null\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const backups = pgTable(\"backups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  websiteId: varchar(\"website_id\").notNull().references(() => websites.id),\n  backupType: text(\"backup_type\").notNull(), // content, settings, full\n  data: jsonb(\"data\").notNull(),\n  wordpressBackupId: text(\"wordpress_backup_id\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertWebsiteSchema = createInsertSchema(websites).pick({\n  name: true,\n  url: true,\n  wpApplicationName: true,\n  wpApplicationPassword: true,\n  wpUsername: true,\n  aiModel: true,\n  autoPosting: true,\n  requireApproval: true,\n  brandVoice: true,\n  contentGuidelines: true,\n  targetAudience: true,\n});\n\nexport const insertContentSchema = createInsertSchema(content).pick({\n  websiteId: true,\n  title: true,\n  body: true,\n  excerpt: true,\n  metaDescription: true,\n  metaTitle: true,\n  aiModel: true,\n  seoKeywords: true,\n  publishDate: true,\n});\n\nexport const insertSeoReportSchema = createInsertSchema(seoReports).pick({\n  websiteId: true,\n  score: true,\n  issues: true,\n  recommendations: true,\n  pageSpeedScore: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).pick({\n  websiteId: true,\n  type: true,\n  description: true,\n  metadata: true,\n});\n\nexport const insertClientReportSchema = createInsertSchema(clientReports).pick({\n  websiteId: true,\n  reportType: true,\n  period: true,\n  data: true,\n  insights: true,\n  roiData: true,\n  whiteLabelConfig: true,\n});\n\n// New insert schemas for enhanced tables\nexport const insertContentApprovalSchema = createInsertSchema(contentApprovals).pick({\n  contentId: true,\n  reviewerId: true,\n  status: true,\n  feedback: true,\n  qualityScore: true,\n});\n\nexport const insertSecurityAuditSchema = createInsertSchema(securityAudits).pick({\n  websiteId: true,\n  userId: true,\n  action: true,\n  ipAddress: true,\n  userAgent: true,\n  success: true,\n  metadata: true,\n});\n\nexport const insertAiUsageTrackingSchema = createInsertSchema(aiUsageTracking).pick({\n  websiteId: true,\n  model: true,\n  tokensUsed: true,\n  costUsd: true,\n  operation: true,\n});\n\nexport const insertSeoAuditSchema = createInsertSchema(seoAudits).pick({\n  websiteId: true,\n  url: true,\n  auditType: true,\n  findings: true,\n  autoFixApplied: true,\n  autoFixResults: true,\n  coreWebVitals: true,\n});\n\nexport const insertContentScheduleSchema = createInsertSchema(contentSchedule).pick({\n  websiteId: true,\n  scheduledDate: true,\n  topic: true,\n  keywords: true,\n  abTestVariant: true,\n});\n\nexport const insertBackupSchema = createInsertSchema(backups).pick({\n  websiteId: true,\n  backupType: true,\n  data: true,\n  wordpressBackupId: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertWebsite = z.infer<typeof insertWebsiteSchema>;\nexport type Website = typeof websites.$inferSelect;\n\nexport type InsertContent = z.infer<typeof insertContentSchema>;\nexport type Content = typeof content.$inferSelect;\n\nexport type InsertSeoReport = z.infer<typeof insertSeoReportSchema>;\nexport type SeoReport = typeof seoReports.$inferSelect;\n\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\n\nexport type InsertClientReport = z.infer<typeof insertClientReportSchema>;\nexport type ClientReport = typeof clientReports.$inferSelect;\n\n// Enhanced types\nexport type InsertContentApproval = z.infer<typeof insertContentApprovalSchema>;\nexport type ContentApproval = typeof contentApprovals.$inferSelect;\n\nexport type InsertSecurityAudit = z.infer<typeof insertSecurityAuditSchema>;\nexport type SecurityAudit = typeof securityAudits.$inferSelect;\n\nexport type InsertAiUsageTracking = z.infer<typeof insertAiUsageTrackingSchema>;\nexport type AiUsageTracking = typeof aiUsageTracking.$inferSelect;\n\nexport type InsertSeoAudit = z.infer<typeof insertSeoAuditSchema>;\nexport type SeoAudit = typeof seoAudits.$inferSelect;\n\nexport type InsertContentSchedule = z.infer<typeof insertContentScheduleSchema>;\nexport type ContentSchedule = typeof contentSchedule.$inferSelect;\n\nexport type InsertBackup = z.infer<typeof insertBackupSchema>;\nexport type Backup = typeof backups.$inferSelect;\n\n// User session type for Replit Auth compatibility\nexport type UpsertUser = typeof users.$inferInsert;\n","size_bytes":12503},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Websites from \"@/pages/websites\";\nimport AIContent from \"@/pages/ai-content\";\nimport SEOAnalysis from \"@/pages/seo-analysis\";\nimport ContentSchedule from \"@/pages/content-schedule\";\nimport Reports from \"@/pages/reports\";\nimport ActivityLogs from \"@/pages/activity-logs\";\nimport Settings from \"@/pages/settings\";\nimport Sidebar, { MobileSidebarProvider } from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/websites\" component={Websites} />\n      <Route path=\"/ai-content\" component={AIContent} />\n      <Route path=\"/seo-analysis\" component={SEOAnalysis} />\n      <Route path=\"/content-schedule\" component={ContentSchedule} />\n      <Route path=\"/reports\" component={Reports} />\n      <Route path=\"/activity-logs\" component={ActivityLogs} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <MobileSidebarProvider>\n          <div className=\"flex h-screen overflow-hidden bg-gray-50\">\n            <Sidebar />\n            <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\n              <Header />\n              <main className=\"flex-1 relative overflow-y-auto focus:outline-none px-4 sm:px-6 lg:px-8\">\n                <div className=\"py-4 sm:py-6\">\n                  <Router />\n                </div>\n              </main>\n            </div>\n          </div>\n          <Toaster />\n        </MobileSidebarProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2069},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(207 89% 42%);\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-50: hsl(207 89% 96%);\n  --primary-100: hsl(207 89% 86%);\n  --primary-500: hsl(207 89% 42%);\n  --primary-600: hsl(207 89% 38%);\n  --primary-700: hsl(207 89% 32%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --secondary-100: hsl(0 0% 96%);\n  --secondary-400: hsl(0 0% 74%);\n  --secondary-500: hsl(0 0% 62%);\n  --secondary-700: hsl(0 0% 26%);\n  --secondary-800: hsl(0 0% 13%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":5482},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/ai-service.ts":{"content":"import OpenAI from \"openai\";\nimport { storage } from \"../storage\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"sk-default-key\" \n});\n\n// OpenAI pricing per 1K tokens (as of 2024)\nconst PRICING = {\n  \"gpt-4o\": {\n    input: 0.005,  // $0.005 per 1K input tokens\n    output: 0.015  // $0.015 per 1K output tokens\n  },\n  \"gpt-4\": {\n    input: 0.03,\n    output: 0.06\n  }\n};\n\nexport interface ContentGenerationRequest {\n  websiteId: string;\n  topic: string;\n  keywords: string[];\n  tone: \"professional\" | \"casual\" | \"friendly\" | \"authoritative\" | \"technical\" | \"warm\";\n  wordCount: number;\n  seoOptimized: boolean;\n  brandVoice?: string;\n  targetAudience?: string;\n  eatCompliance?: boolean; // E-E-A-T compliance for YMYL content\n}\n\nexport interface ContentGenerationResult {\n  title: string;\n  content: string;\n  excerpt: string;\n  metaDescription: string;\n  metaTitle: string;\n  keywords: string[];\n  seoScore: number;\n  readabilityScore: number;\n  brandVoiceScore: number;\n  eatCompliance: boolean;\n  tokensUsed: number;\n  costUsd: number;\n  qualityChecks: {\n    plagiarismRisk: \"low\" | \"medium\" | \"high\";\n    factualAccuracy: \"verified\" | \"needs_review\" | \"questionable\";\n    brandAlignment: \"excellent\" | \"good\" | \"needs_improvement\";\n  };\n}\n\nexport class AIService {\n  async generateContent(request: ContentGenerationRequest): Promise<ContentGenerationResult> {\n    try {\n      const prompt = this.buildContentPrompt(request);\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert content writer and SEO specialist. Create high-quality, engaging content that is optimized for search engines. Respond with JSON in the format: { 'title': string, 'content': string, 'metaDescription': string, 'keywords': string[], 'seoScore': number }\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.7,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      return {\n        title: result.title || \"Generated Content\",\n        content: result.content || \"\",\n        metaDescription: result.metaDescription || \"\",\n        keywords: result.keywords || request.keywords,\n        seoScore: Math.max(70, Math.min(100, result.seoScore || 85))\n      };\n    } catch (error) {\n      console.error(\"AI content generation failed:\", error);\n      throw new Error(\"Failed to generate content using AI. Please check your API configuration.\");\n    }\n  }\n\n  async optimizeContent(content: string, keywords: string[]): Promise<{\n    optimizedContent: string;\n    suggestions: string[];\n    seoScore: number;\n  }> {\n    try {\n      const prompt = `Optimize the following content for SEO using these keywords: ${keywords.join(\", \")}. \n      \n      Content: ${content}\n      \n      Provide suggestions for improvement and return optimized content with an SEO score.`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an SEO optimization expert. Analyze and improve content for better search engine rankings. Respond with JSON in the format: { 'optimizedContent': string, 'suggestions': string[], 'seoScore': number }\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      return {\n        optimizedContent: result.optimizedContent || content,\n        suggestions: result.suggestions || [],\n        seoScore: Math.max(50, Math.min(100, result.seoScore || 75))\n      };\n    } catch (error) {\n      console.error(\"Content optimization failed:\", error);\n      throw new Error(\"Failed to optimize content. Please try again.\");\n    }\n  }\n\n  private buildContentPrompt(request: ContentGenerationRequest): string {\n    return `Create a comprehensive blog post about \"${request.topic}\" with the following requirements:\n    \n    - Target keywords: ${request.keywords.join(\", \")}\n    - Tone: ${request.tone}\n    - Word count: approximately ${request.wordCount} words\n    - SEO optimized: ${request.seoOptimized ? \"Yes\" : \"No\"}\n    \n    The content should be engaging, informative, and well-structured with proper headings. Include a compelling title and meta description optimized for search engines.\n    \n    Please ensure the content is original, valuable to readers, and follows SEO best practices including proper keyword usage, readability, and structure.`;\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":5002},"server/services/approval-workflow.ts":{"content":"import { storage } from \"../storage\";\nimport { wordPressAuthService } from \"./wordpress-auth\";\n\ninterface ContentApprovalRequest {\n  contentId: string;\n  reviewerId: string;\n  decision: \"approved\" | \"rejected\" | \"needs_revision\";\n  feedback?: string;\n  qualityScore?: number;\n}\n\ninterface PublishingOptions {\n  publishNow?: boolean;\n  scheduledDate?: Date;\n  performBackup?: boolean;\n}\n\nexport class ApprovalWorkflowService {\n  /**\n   * Submit content for approval\n   */\n  async submitForApproval(contentId: string): Promise<{\n    success: boolean;\n    message: string;\n  }> {\n    try {\n      const content = await storage.getContent(contentId);\n      if (!content) {\n        return { success: false, message: \"Content not found\" };\n      }\n\n      await storage.updateContent(contentId, {\n        status: \"pending_approval\"\n      });\n\n      await storage.createActivityLog({\n        websiteId: content.websiteId,\n        type: \"content_submitted_for_approval\",\n        description: `Content submitted for approval: \"${content.title}\"`,\n        metadata: { contentId, previousStatus: content.status }\n      });\n\n      return { \n        success: true, \n        message: \"Content submitted for approval successfully\" \n      };\n    } catch (error) {\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : \"Failed to submit for approval\" \n      };\n    }\n  }\n\n  /**\n   * Process content approval decision\n   */\n  async processApproval(request: ContentApprovalRequest): Promise<{\n    success: boolean;\n    message: string;\n    contentStatus?: string;\n  }> {\n    try {\n      const content = await storage.getContent(request.contentId);\n      if (!content) {\n        return { success: false, message: \"Content not found\" };\n      }\n\n      // Create approval record\n      await storage.createContentApproval({\n        contentId: request.contentId,\n        reviewerId: request.reviewerId,\n        status: request.decision,\n        feedback: request.feedback,\n        qualityScore: request.qualityScore\n      });\n\n      // Update content status based on decision\n      let newStatus: string;\n      switch (request.decision) {\n        case \"approved\":\n          newStatus = \"approved\";\n          break;\n        case \"rejected\":\n          newStatus = \"rejected\";\n          break;\n        case \"needs_revision\":\n          newStatus = \"needs_revision\";\n          break;\n        default:\n          newStatus = \"pending_approval\";\n      }\n\n      await storage.updateContent(request.contentId, {\n        status: newStatus,\n        approvedBy: request.decision === \"approved\" ? request.reviewerId : undefined,\n        approvedAt: request.decision === \"approved\" ? new Date() : undefined,\n        rejectionReason: request.decision === \"rejected\" ? (request.feedback || undefined) : undefined\n      });\n\n      // Log the approval decision\n      await storage.createActivityLog({\n        websiteId: content.websiteId,\n        type: `content_${request.decision}`,\n        description: `Content ${request.decision}: \"${content.title}\"`,\n        metadata: { \n          contentId: request.contentId, \n          reviewerId: request.reviewerId,\n          qualityScore: request.qualityScore,\n          feedback: request.feedback\n        }\n      });\n\n      return { \n        success: true, \n        message: `Content ${request.decision} successfully`,\n        contentStatus: newStatus\n      };\n    } catch (error) {\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : \"Failed to process approval\" \n      };\n    }\n  }\n\n  /**\n   * Publish approved content to WordPress\n   */\n  async publishApprovedContent(\n    contentId: string, \n    options: PublishingOptions = {}\n  ): Promise<{\n    success: boolean;\n    message: string;\n    wordpressPostId?: number;\n  }> {\n    try {\n      const content = await storage.getContent(contentId);\n      if (!content) {\n        return { success: false, message: \"Content not found\" };\n      }\n\n      if (content.status !== \"approved\") {\n        return { success: false, message: \"Content must be approved before publishing\" };\n      }\n\n      const website = await storage.getWebsite(content.websiteId);\n      if (!website) {\n        return { success: false, message: \"Website not found\" };\n      }\n\n      // Create backup if requested\n      if (options.performBackup) {\n        await this.createContentBackup(contentId, website.id);\n      }\n\n      // Decrypt WordPress credentials\n      const credentials = wordPressAuthService.decryptCredentials(\n        {\n          encrypted: website.wpApplicationPassword,\n          iv: \"\", // Would need to store IV separately in real implementation\n          tag: \"\"\n        },\n        website.wpApplicationName\n      );\n\n      // Create draft post first\n      const draftResult = await wordPressAuthService.createDraftPost(\n        website.url,\n        credentials,\n        {\n          title: content.title,\n          content: content.body,\n          excerpt: content.excerpt,\n          meta_description: content.metaDescription,\n          seo_keywords: content.seoKeywords\n        }\n      );\n\n      if (!draftResult.success || !draftResult.postId) {\n        return { success: false, message: draftResult.error || \"Failed to create draft\" };\n      }\n\n      // Publish the post\n      let publishResult;\n      if (options.publishNow) {\n        publishResult = await wordPressAuthService.publishPost(\n          website.url,\n          credentials,\n          draftResult.postId,\n          options.scheduledDate\n        );\n      } else {\n        publishResult = { success: true }; // Keep as draft\n      }\n\n      if (!publishResult.success) {\n        return { success: false, message: publishResult.error || \"Failed to publish post\" };\n      }\n\n      // Update content with WordPress post ID and published status\n      await storage.updateContent(contentId, {\n        status: options.publishNow ? \"published\" : \"scheduled\",\n        publishDate: options.publishNow ? new Date() : options.scheduledDate,\n        wordpressPostId: draftResult.postId\n      });\n\n      // Log the publishing activity\n      await storage.createActivityLog({\n        websiteId: content.websiteId,\n        type: options.publishNow ? \"content_published\" : \"content_scheduled\",\n        description: `Content ${options.publishNow ? \"published\" : \"scheduled\"}: \"${content.title}\"`,\n        metadata: { \n          contentId,\n          wordpressPostId: draftResult.postId,\n          publishDate: options.publishNow ? new Date() : options.scheduledDate\n        }\n      });\n\n      return { \n        success: true, \n        message: `Content ${options.publishNow ? \"published\" : \"scheduled\"} successfully`,\n        wordpressPostId: draftResult.postId\n      };\n    } catch (error) {\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : \"Failed to publish content\" \n      };\n    }\n  }\n\n  /**\n   * Create content backup before publishing\n   */\n  private async createContentBackup(contentId: string, websiteId: string): Promise<void> {\n    try {\n      const content = await storage.getContent(contentId);\n      if (!content) return;\n\n      await storage.createBackup({\n        websiteId,\n        backupType: \"content\",\n        data: {\n          contentId,\n          title: content.title,\n          body: content.body,\n          status: content.status,\n          createdAt: content.createdAt,\n          backupReason: \"pre_publish\"\n        }\n      });\n    } catch (error) {\n      console.error(\"Failed to create content backup:\", error);\n    }\n  }\n\n  /**\n   * Get all pending approval content\n   */\n  async getPendingApprovals(): Promise<any[]> {\n    try {\n      return await storage.getPendingApprovalContent();\n    } catch (error) {\n      console.error(\"Failed to get pending approvals:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Emergency stop - pause all automation for a website\n   */\n  async emergencyStop(websiteId: string, reason: string): Promise<{\n    success: boolean;\n    message: string;\n  }> {\n    try {\n      const website = await storage.updateWebsite(websiteId, {\n        status: \"suspended\",\n        autoPosting: false\n      });\n\n      if (!website) {\n        return { success: false, message: \"Website not found\" };\n      }\n\n      await storage.createActivityLog({\n        websiteId,\n        type: \"emergency_stop\",\n        description: `Emergency stop activated: ${reason}`,\n        metadata: { reason, timestamp: new Date() }\n      });\n\n      await storage.createSecurityAudit({\n        websiteId,\n        action: \"emergency_stop\",\n        success: true,\n        metadata: { reason }\n      });\n\n      return { \n        success: true, \n        message: \"Emergency stop activated successfully\" \n      };\n    } catch (error) {\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : \"Failed to activate emergency stop\" \n      };\n    }\n  }\n}\n\nexport const approvalWorkflowService = new ApprovalWorkflowService();","size_bytes":9008},"server/services/seo-service.ts":{"content":"export interface SEOAnalysisResult {\n  score: number;\n  issues: SEOIssue[];\n  recommendations: SEORecommendation[];\n  pageSpeedScore?: number;\n}\n\nexport interface SEOIssue {\n  type: \"critical\" | \"warning\" | \"info\";\n  title: string;\n  description: string;\n  affectedPages: number;\n  autoFixAvailable: boolean;\n}\n\nexport interface SEORecommendation {\n  priority: \"high\" | \"medium\" | \"low\";\n  title: string;\n  description: string;\n  impact: string;\n}\n\nexport class SEOService {\n  async analyzeWebsite(url: string): Promise<SEOAnalysisResult> {\n    try {\n      // Simulate API call to Google PageSpeed Insights or similar service\n      const pageSpeedScore = await this.getPageSpeedScore(url);\n      const technicalAnalysis = await this.performTechnicalAnalysis(url);\n      \n      const issues = this.generateIssues(url);\n      const recommendations = this.generateRecommendations(issues);\n      const score = this.calculateOverallScore(issues, pageSpeedScore);\n\n      return {\n        score,\n        issues,\n        recommendations,\n        pageSpeedScore\n      };\n    } catch (error) {\n      console.error(\"SEO analysis failed:\", error);\n      throw new Error(\"Failed to analyze website SEO. Please check the URL and try again.\");\n    }\n  }\n\n  private async getPageSpeedScore(url: string): Promise<number> {\n    // In a real implementation, this would call Google PageSpeed Insights API\n    // For now, simulate a score based on URL characteristics\n    const baseScore = 75;\n    const randomVariation = Math.random() * 20 - 10; // +/- 10 points\n    return Math.max(20, Math.min(100, Math.round(baseScore + randomVariation)));\n  }\n\n  private async performTechnicalAnalysis(url: string): Promise<any> {\n    // In a real implementation, this would crawl the website and analyze:\n    // - Meta tags\n    // - Heading structure\n    // - Image alt texts\n    // - Internal linking\n    // - Schema markup\n    // - Page load speed\n    // - Mobile responsiveness\n    \n    return {\n      metaTags: this.analyzeMetaTags(url),\n      headings: this.analyzeHeadings(url),\n      images: this.analyzeImages(url),\n      links: this.analyzeLinks(url)\n    };\n  }\n\n  private analyzeMetaTags(url: string): any {\n    // Simulate meta tag analysis\n    return {\n      missingDescriptions: Math.floor(Math.random() * 10),\n      duplicateTitles: Math.floor(Math.random() * 5),\n      longTitles: Math.floor(Math.random() * 3)\n    };\n  }\n\n  private analyzeHeadings(url: string): any {\n    return {\n      missingH1: Math.floor(Math.random() * 2),\n      multipleH1: Math.floor(Math.random() * 3),\n      improperHierarchy: Math.floor(Math.random() * 5)\n    };\n  }\n\n  private analyzeImages(url: string): any {\n    return {\n      missingAltText: Math.floor(Math.random() * 15),\n      largeSizes: Math.floor(Math.random() * 8),\n      unoptimizedFormats: Math.floor(Math.random() * 12)\n    };\n  }\n\n  private analyzeLinks(url: string): any {\n    return {\n      brokenLinks: Math.floor(Math.random() * 3),\n      missingInternalLinks: Math.floor(Math.random() * 10),\n      poorAnchorText: Math.floor(Math.random() * 7)\n    };\n  }\n\n  private generateIssues(url: string): SEOIssue[] {\n    const issues: SEOIssue[] = [];\n    \n    // Generate realistic issues based on common SEO problems\n    const possibleIssues = [\n      {\n        type: \"critical\" as const,\n        title: \"Missing Meta Descriptions\",\n        description: \"Several pages are missing meta descriptions, which are important for search engine results.\",\n        affectedPages: Math.floor(Math.random() * 10) + 1,\n        autoFixAvailable: true\n      },\n      {\n        type: \"warning\" as const,\n        title: \"Slow Page Load Speed\",\n        description: \"Page load times are above recommended thresholds, affecting user experience and rankings.\",\n        affectedPages: Math.floor(Math.random() * 5) + 1,\n        autoFixAvailable: false\n      },\n      {\n        type: \"warning\" as const,\n        title: \"Missing Alt Text on Images\",\n        description: \"Images without alt text reduce accessibility and SEO effectiveness.\",\n        affectedPages: Math.floor(Math.random() * 8) + 1,\n        autoFixAvailable: true\n      },\n      {\n        type: \"info\" as const,\n        title: \"Optimize Internal Linking\",\n        description: \"Adding more internal links could improve page authority distribution.\",\n        affectedPages: Math.floor(Math.random() * 15) + 5,\n        autoFixAvailable: false\n      }\n    ];\n\n    // Randomly select 2-4 issues\n    const numberOfIssues = Math.floor(Math.random() * 3) + 2;\n    const selectedIssues = possibleIssues\n      .sort(() => Math.random() - 0.5)\n      .slice(0, numberOfIssues);\n\n    return selectedIssues;\n  }\n\n  private generateRecommendations(issues: SEOIssue[]): SEORecommendation[] {\n    const recommendations: SEORecommendation[] = [\n      {\n        priority: \"high\",\n        title: \"Implement Schema Markup\",\n        description: \"Add structured data to help search engines understand your content better.\",\n        impact: \"Improved rich snippets and search visibility\"\n      },\n      {\n        priority: \"medium\",\n        title: \"Optimize for Core Web Vitals\",\n        description: \"Focus on Largest Contentful Paint, First Input Delay, and Cumulative Layout Shift.\",\n        impact: \"Better user experience and search rankings\"\n      },\n      {\n        priority: \"medium\",\n        title: \"Improve Content Freshness\",\n        description: \"Regularly update existing content and publish new, relevant articles.\",\n        impact: \"Increased organic traffic and user engagement\"\n      }\n    ];\n\n    // Add specific recommendations based on detected issues\n    issues.forEach(issue => {\n      if (issue.title.includes(\"Meta Descriptions\")) {\n        recommendations.unshift({\n          priority: \"high\",\n          title: \"Fix Missing Meta Descriptions\",\n          description: \"Add unique, compelling meta descriptions to all pages.\",\n          impact: \"Improved click-through rates from search results\"\n        });\n      }\n    });\n\n    return recommendations;\n  }\n\n  private calculateOverallScore(issues: SEOIssue[], pageSpeedScore: number): number {\n    let baseScore = 90;\n    \n    issues.forEach(issue => {\n      switch (issue.type) {\n        case \"critical\":\n          baseScore -= 15;\n          break;\n        case \"warning\":\n          baseScore -= 8;\n          break;\n        case \"info\":\n          baseScore -= 3;\n          break;\n      }\n    });\n\n    // Factor in page speed (30% weight)\n    const speedImpact = (pageSpeedScore - 75) * 0.3;\n    baseScore += speedImpact;\n\n    return Math.max(0, Math.min(100, Math.round(baseScore)));\n  }\n\n  async performAutoFix(websiteId: string, issueType: string): Promise<{ success: boolean; message: string }> {\n    try {\n      // In a real implementation, this would:\n      // 1. Connect to WordPress via REST API or XML-RPC\n      // 2. Identify pages with the specific issue\n      // 3. Apply automated fixes (e.g., generate meta descriptions)\n      // 4. Update the website content\n      \n      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate processing time\n      \n      return {\n        success: true,\n        message: `Successfully applied auto-fix for ${issueType}. Changes have been made to your WordPress site.`\n      };\n    } catch (error) {\n      console.error(\"Auto-fix failed:\", error);\n      return {\n        success: false,\n        message: \"Auto-fix failed. Please check your WordPress connection and try again.\"\n      };\n    }\n  }\n}\n\nexport const seoService = new SEOService();\n","size_bytes":7528},"server/services/wordpress-auth.ts":{"content":"import crypto from 'crypto';\n\n// Encryption utilities for securing WordPress Application Passwords\nconst ENCRYPTION_ALGORITHM = 'aes-256-gcm';\nconst SECRET_KEY = process.env.ENCRYPTION_SECRET || crypto.randomBytes(32).toString('hex');\n\ninterface WordPressAuth {\n  applicationName: string;\n  applicationPassword: string;\n  username: string;\n}\n\ninterface EncryptedCredentials {\n  encrypted: string;\n  iv: string;\n  tag: string;\n}\n\nexport class WordPressAuthService {\n  private getKey(): Buffer {\n    return Buffer.from(SECRET_KEY.slice(0, 64), 'hex');\n  }\n\n  /**\n   * Encrypt WordPress Application Password\n   */\n  encryptCredentials(credentials: WordPressAuth): EncryptedCredentials {\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipher(ENCRYPTION_ALGORITHM, this.getKey());\n    cipher.setAAD(Buffer.from(credentials.applicationName));\n\n    let encrypted = cipher.update(JSON.stringify(credentials), 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n\n    const tag = cipher.getAuthTag();\n\n    return {\n      encrypted,\n      iv: iv.toString('hex'),\n      tag: tag.toString('hex')\n    };\n  }\n\n  /**\n   * Decrypt WordPress Application Password\n   */\n  decryptCredentials(encryptedData: EncryptedCredentials, applicationName: string): WordPressAuth {\n    const decipher = crypto.createDecipher(ENCRYPTION_ALGORITHM, this.getKey());\n    decipher.setAAD(Buffer.from(applicationName));\n    decipher.setAuthTag(Buffer.from(encryptedData.tag, 'hex'));\n\n    let decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return JSON.parse(decrypted);\n  }\n\n  /**\n   * Test WordPress connection using Application Password\n   */\n  async testConnection(url: string, credentials: WordPressAuth): Promise<{\n    success: boolean;\n    error?: string;\n    userInfo?: any;\n  }> {\n    try {\n      const authString = Buffer.from(\n        `${credentials.username}:${credentials.applicationPassword}`\n      ).toString('base64');\n\n      const response = await fetch(`${url.replace(/\\/$/, '')}/wp-json/wp/v2/users/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Basic ${authString}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return {\n          success: false,\n          error: `HTTP ${response.status}: ${errorText}`,\n        };\n      }\n\n      const userInfo = await response.json();\n      return {\n        success: true,\n        userInfo: {\n          id: userInfo.id,\n          username: userInfo.username,\n          displayName: userInfo.name,\n          email: userInfo.email,\n          roles: userInfo.roles,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  /**\n   * Create a draft post in WordPress\n   */\n  async createDraftPost(\n    url: string, \n    credentials: WordPressAuth, \n    postData: {\n      title: string;\n      content: string;\n      excerpt?: string;\n      meta_description?: string;\n      seo_keywords?: string[];\n    }\n  ): Promise<{ success: boolean; postId?: number; error?: string }> {\n    try {\n      const authString = Buffer.from(\n        `${credentials.username}:${credentials.applicationPassword}`\n      ).toString('base64');\n\n      const response = await fetch(`${url.replace(/\\/$/, '')}/wp-json/wp/v2/posts`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Basic ${authString}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: postData.title,\n          content: postData.content,\n          excerpt: postData.excerpt || '',\n          status: 'draft',\n          meta: {\n            _yoast_wpseo_metadesc: postData.meta_description,\n            _yoast_wpseo_focuskw: postData.seo_keywords?.join(', '),\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return {\n          success: false,\n          error: `HTTP ${response.status}: ${errorText}`,\n        };\n      }\n\n      const post = await response.json();\n      return {\n        success: true,\n        postId: post.id,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  /**\n   * Publish a draft post\n   */\n  async publishPost(\n    url: string, \n    credentials: WordPressAuth, \n    postId: number,\n    publishDate?: Date\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const authString = Buffer.from(\n        `${credentials.username}:${credentials.applicationPassword}`\n      ).toString('base64');\n\n      const response = await fetch(`${url.replace(/\\/$/, '')}/wp-json/wp/v2/posts/${postId}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Basic ${authString}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          status: 'publish',\n          date: publishDate ? publishDate.toISOString() : undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return {\n          success: false,\n          error: `HTTP ${response.status}: ${errorText}`,\n        };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n      };\n    }\n  }\n\n  /**\n   * Create WordPress Application Password guide\n   */\n  getApplicationPasswordInstructions(): {\n    title: string;\n    steps: string[];\n    securityNote: string;\n  } {\n    return {\n      title: \"How to Create WordPress Application Password\",\n      steps: [\n        \"1. Log into your WordPress admin dashboard\",\n        \"2. Go to Users → Your Profile (or Users → All Users → Edit your user)\",\n        \"3. Scroll down to the 'Application Passwords' section\",\n        \"4. Enter a name like 'AI Content Manager' in the 'New Application Password Name' field\",\n        \"5. Click 'Add New Application Password'\",\n        \"6. Copy the generated password immediately (it won't be shown again)\",\n        \"7. Use this password along with your WordPress username in the form below\"\n      ],\n      securityNote: \"Application Passwords are more secure than regular passwords and can be revoked individually without changing your main password.\"\n    };\n  }\n}\n\nexport const wordPressAuthService = new WordPressAuthService();","size_bytes":6616},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport const api = {\n  // Websites\n  getWebsites: () => fetch(\"/api/websites\").then(res => res.json()),\n  getWebsite: (id: string) => fetch(`/api/websites/${id}`).then(res => res.json()),\n  createWebsite: (data: any) => apiRequest(\"POST\", \"/api/websites\", data),\n  updateWebsite: (id: string, data: any) => apiRequest(\"PUT\", `/api/websites/${id}`, data),\n  deleteWebsite: (id: string) => apiRequest(\"DELETE\", `/api/websites/${id}`),\n\n  // Content\n  getWebsiteContent: (websiteId: string) => fetch(`/api/websites/${websiteId}/content`).then(res => res.json()),\n  generateContent: (data: any) => apiRequest(\"POST\", \"/api/content/generate\", data),\n  publishContent: (id: string) => apiRequest(\"POST\", `/api/content/${id}/publish`),\n\n  // SEO\n  getSeoReports: (websiteId: string) => fetch(`/api/websites/${websiteId}/seo-reports`).then(res => res.json()),\n  runSeoAnalysis: (websiteId: string) => apiRequest(\"POST\", `/api/websites/${websiteId}/seo-analysis`),\n  performAutoFix: (websiteId: string, issueType: string) => apiRequest(\"POST\", `/api/websites/${websiteId}/seo-autofix`, { issueType }),\n\n  // Dashboard\n  getDashboardStats: () => fetch(\"/api/dashboard/stats\").then(res => res.json()),\n  getPerformanceData: () => fetch(\"/api/dashboard/performance\").then(res => res.json()),\n\n  // Activity Logs\n  getActivityLogs: (websiteId?: string) => {\n    const url = websiteId ? `/api/activity-logs?websiteId=${websiteId}` : \"/api/activity-logs\";\n    return fetch(url).then(res => res.json());\n  }\n};\n","size_bytes":1540},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/activity-logs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Activity, Filter, Download, Search, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { api } from \"@/lib/api\";\nimport { format, formatDistanceToNow } from \"date-fns\";\n\nconst activityTypeColors = {\n  content_published: \"bg-green-100 text-green-800\",\n  content_generated: \"bg-blue-100 text-blue-800\",\n  content_scheduled: \"bg-yellow-100 text-yellow-800\",\n  seo_analysis: \"bg-purple-100 text-purple-800\",\n  seo_issue: \"bg-red-100 text-red-800\",\n  website_connected: \"bg-indigo-100 text-indigo-800\",\n  seo_autofix: \"bg-green-100 text-green-800\",\n};\n\nconst activityTypeLabels = {\n  content_published: \"Content Published\",\n  content_generated: \"Content Generated\",\n  content_scheduled: \"Content Scheduled\",\n  seo_analysis: \"SEO Analysis\",\n  seo_issue: \"SEO Issue\",\n  website_connected: \"Website Connected\",\n  seo_autofix: \"SEO Auto-Fix\",\n};\n\nconst getActivityIcon = (type: string) => {\n  const iconClass = \"w-3 h-3\";\n  switch (type) {\n    case \"content_published\":\n    case \"content_generated\":\n    case \"content_scheduled\":\n      return <Activity className={iconClass} />;\n    case \"seo_analysis\":\n    case \"seo_issue\":\n    case \"seo_autofix\":\n      return <Search className={iconClass} />;\n    case \"website_connected\":\n      return <Calendar className={iconClass} />;\n    default:\n      return <Activity className={iconClass} />;\n  }\n};\n\nexport default function ActivityLogs() {\n  const [selectedWebsite, setSelectedWebsite] = useState<string>(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activityFilter, setActivityFilter] = useState<string>(\"\");\n\n  const { data: websites } = useQuery({\n    queryKey: [\"/api/websites\"],\n    queryFn: api.getWebsites,\n  });\n\n  const { data: activities, isLoading } = useQuery({\n    queryKey: [\"/api/activity-logs\", selectedWebsite],\n    queryFn: () => api.getActivityLogs(selectedWebsite || undefined),\n  });\n\n  const getWebsiteName = (websiteId: string | null) => {\n    if (!websiteId) return \"System\";\n    const website = websites?.find(w => w.id === websiteId);\n    return website?.name || \"Unknown Website\";\n  };\n\n  const filteredActivities = activities?.filter(activity => {\n    if (searchQuery && !activity.description.toLowerCase().includes(searchQuery.toLowerCase())) {\n      return false;\n    }\n    if (activityFilter && activity.type !== activityFilter) {\n      return false;\n    }\n    return true;\n  }) || [];\n\n  const activityStats = {\n    total: activities?.length || 0,\n    today: activities?.filter(a => {\n      const today = new Date();\n      const activityDate = new Date(a.createdAt);\n      return activityDate.toDateString() === today.toDateString();\n    }).length || 0,\n    content: activities?.filter(a => a.type.includes(\"content\")).length || 0,\n    seo: activities?.filter(a => a.type.includes(\"seo\")).length || 0,\n  };\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        {/* Page Header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-8\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n              Activity Logs\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Complete history of all automation activities across your websites\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Button variant=\"outline\" className=\"mr-2\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Advanced Filters\n            </Button>\n            <Button variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Logs\n            </Button>\n          </div>\n        </div>\n\n        {/* Activity Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Total Activities</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{activityStats.total}</div>\n              <p className=\"text-xs text-gray-500 mt-1\">All time</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Today</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">{activityStats.today}</div>\n              <p className=\"text-xs text-gray-500 mt-1\">Activities today</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Content Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{activityStats.content}</div>\n              <p className=\"text-xs text-gray-500 mt-1\">Generation & publishing</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">SEO Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">{activityStats.seo}</div>\n              <p className=\"text-xs text-gray-500 mt-1\">Analysis & optimization</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search activities...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          <Select value={selectedWebsite} onValueChange={setSelectedWebsite}>\n            <SelectTrigger className=\"w-64\">\n              <SelectValue placeholder=\"All websites\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All websites</SelectItem>\n              {websites?.map((website) => (\n                <SelectItem key={website.id} value={website.id}>\n                  {website.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select value={activityFilter} onValueChange={setActivityFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"All activities\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All activities</SelectItem>\n              {Object.entries(activityTypeLabels).map(([type, label]) => (\n                <SelectItem key={type} value={type}>\n                  {label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Activity Timeline */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Activity Timeline</CardTitle>\n            <CardDescription>\n              Chronological view of all automation activities\n              {selectedWebsite && ` for ${getWebsiteName(selectedWebsite)}`}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"text-gray-500\">Loading activities...</div>\n              </div>\n            ) : filteredActivities.length > 0 ? (\n              <div className=\"space-y-4\">\n                {filteredActivities.map((activity, index) => (\n                  <div key={activity.id} className=\"relative\">\n                    {/* Timeline line */}\n                    {index < filteredActivities.length - 1 && (\n                      <div className=\"absolute left-4 top-8 w-0.5 h-8 bg-gray-200\"></div>\n                    )}\n                    \n                    <div className=\"flex items-start space-x-4\">\n                      {/* Timeline dot */}\n                      <div className=\"flex-shrink-0 w-8 h-8 bg-white border-2 border-gray-300 rounded-full flex items-center justify-center\">\n                        {getActivityIcon(activity.type)}\n                      </div>\n                      \n                      {/* Activity content */}\n                      <div className=\"flex-1 min-w-0 pb-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <p className=\"text-sm font-medium text-gray-900\">\n                                {activity.description}\n                              </p>\n                              <Badge className={activityTypeColors[activity.type as keyof typeof activityTypeColors] || \"bg-gray-100 text-gray-800\"}>\n                                {activityTypeLabels[activity.type as keyof typeof activityTypeLabels] || activity.type}\n                              </Badge>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                              <span>{getWebsiteName(activity.websiteId)}</span>\n                              <span>{format(new Date(activity.createdAt), \"MMM dd, yyyy 'at' HH:mm\")}</span>\n                              <span>{formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}</span>\n                            </div>\n                            \n                            {/* Metadata */}\n                            {activity.metadata && Object.keys(activity.metadata).length > 0 && (\n                              <div className=\"mt-2 text-xs text-gray-600\">\n                                <details className=\"cursor-pointer\">\n                                  <summary className=\"hover:text-gray-800\">View details</summary>\n                                  <pre className=\"mt-1 p-2 bg-gray-50 rounded text-xs overflow-x-auto\">\n                                    {JSON.stringify(activity.metadata, null, 2)}\n                                  </pre>\n                                </details>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Activity className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No activities found</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  {searchQuery || activityFilter\n                    ? \"No activities match your current filters.\"\n                    : selectedWebsite\n                    ? \"No activities recorded for this website yet.\"\n                    : \"Activities will appear here as your automation runs.\"\n                  }\n                </p>\n                {(searchQuery || activityFilter) && (\n                  <div className=\"mt-6\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSearchQuery(\"\");\n                        setActivityFilter(\"\");\n                      }}\n                    >\n                      Clear Filters\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Activity Summary by Type */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Activity Summary</CardTitle>\n            <CardDescription>\n              Breakdown of activities by type\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {Object.entries(activityTypeLabels).map(([type, label]) => {\n                const count = activities?.filter(a => a.type === type).length || 0;\n                return (\n                  <div key={type} className=\"text-center p-4 border rounded-lg\">\n                    <div className=\"text-2xl font-bold text-gray-900\">{count}</div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{label}</p>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13254},"client/src/pages/ai-content.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Bot, Plus, Sparkles, Clock, CheckCircle, Play, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { z } from \"zod\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst contentFormSchema = z.object({\n  websiteId: z.string().min(1, \"Please select a website\"),\n  topic: z.string().min(1, \"Topic is required\"),\n  keywords: z.string(),\n  tone: z.enum([\"professional\", \"casual\", \"friendly\", \"authoritative\"]),\n  wordCount: z.number().min(100).max(5000),\n});\n\ntype ContentFormData = z.infer<typeof contentFormSchema>;\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"published\":\n      return \"bg-green-100 text-green-800\";\n    case \"generating\":\n      return \"bg-blue-100 text-blue-800\";\n    case \"scheduled\":\n      return \"bg-yellow-100 text-yellow-800\";\n    case \"draft\":\n      return \"bg-gray-100 text-gray-800\";\n    default:\n      return \"bg-gray-100 text-gray-800\";\n  }\n};\n\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case \"published\":\n      return <CheckCircle className=\"w-4 h-4\" />;\n    case \"generating\":\n      return <Bot className=\"w-4 h-4\" />;\n    case \"scheduled\":\n      return <Clock className=\"w-4 h-4\" />;\n    case \"draft\":\n      return <Edit className=\"w-4 h-4\" />;\n    default:\n      return <Edit className=\"w-4 h-4\" />;\n  }\n};\n\nexport default function AIContent() {\n  const [isGenerateDialogOpen, setIsGenerateDialogOpen] = useState(false);\n  const [selectedWebsite, setSelectedWebsite] = useState<string>(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: websites } = useQuery({\n    queryKey: [\"/api/websites\"],\n    queryFn: api.getWebsites,\n  });\n\n  const { data: content, isLoading } = useQuery({\n    queryKey: [\"/api/content\", selectedWebsite],\n    queryFn: () => selectedWebsite ? api.getWebsiteContent(selectedWebsite) : Promise.resolve([]),\n    enabled: !!selectedWebsite,\n  });\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm<ContentFormData>({\n    resolver: zodResolver(contentFormSchema),\n    defaultValues: {\n      tone: \"professional\",\n      wordCount: 800,\n    },\n  });\n\n  const generateContent = useMutation({\n    mutationFn: api.generateContent,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activity-logs\"] });\n      toast({\n        title: \"Content Generated\",\n        description: \"AI content has been successfully generated and saved as draft.\",\n      });\n      setIsGenerateDialogOpen(false);\n      reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate content. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const publishContent = useMutation({\n    mutationFn: api.publishContent,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/content\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activity-logs\"] });\n      toast({\n        title: \"Content Published\",\n        description: \"Content has been published to your WordPress site.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Publish Failed\",\n        description: \"Failed to publish content. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ContentFormData) => {\n    const keywords = data.keywords.split(\",\").map(k => k.trim()).filter(k => k);\n    generateContent.mutate({\n      ...data,\n      keywords,\n    });\n  };\n\n  const getWebsiteName = (websiteId: string) => {\n    const website = websites?.find(w => w.id === websiteId);\n    return website?.name || \"Unknown Website\";\n  };\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        {/* Page Header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-8\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n              AI Content Generation\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Create high-quality, SEO-optimized content using AI\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Dialog open={isGenerateDialogOpen} onOpenChange={setIsGenerateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary-500 hover:bg-primary-600 text-white\">\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Generate Content\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-lg\">\n                <DialogHeader>\n                  <DialogTitle>Generate AI Content</DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"websiteId\">Target Website</Label>\n                    <Select\n                      value={watch(\"websiteId\")}\n                      onValueChange={(value) => setValue(\"websiteId\", value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select website\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {websites?.map((website) => (\n                          <SelectItem key={website.id} value={website.id}>\n                            {website.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {errors.websiteId && (\n                      <p className=\"text-sm text-red-600 mt-1\">{errors.websiteId.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"topic\">Content Topic</Label>\n                    <Input\n                      id=\"topic\"\n                      {...register(\"topic\")}\n                      placeholder=\"e.g., Latest WordPress Security Tips\"\n                    />\n                    {errors.topic && (\n                      <p className=\"text-sm text-red-600 mt-1\">{errors.topic.message}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"keywords\">SEO Keywords (comma-separated)</Label>\n                    <Input\n                      id=\"keywords\"\n                      {...register(\"keywords\")}\n                      placeholder=\"wordpress, security, tips, 2024\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"tone\">Content Tone</Label>\n                      <Select\n                        value={watch(\"tone\")}\n                        onValueChange={(value) => setValue(\"tone\", value as any)}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"professional\">Professional</SelectItem>\n                          <SelectItem value=\"casual\">Casual</SelectItem>\n                          <SelectItem value=\"friendly\">Friendly</SelectItem>\n                          <SelectItem value=\"authoritative\">Authoritative</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"wordCount\">Word Count</Label>\n                      <Input\n                        id=\"wordCount\"\n                        type=\"number\"\n                        {...register(\"wordCount\", { valueAsNumber: true })}\n                        min=\"100\"\n                        max=\"5000\"\n                      />\n                      {errors.wordCount && (\n                        <p className=\"text-sm text-red-600 mt-1\">{errors.wordCount.message}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-3 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      onClick={() => setIsGenerateDialogOpen(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      className=\"flex-1 bg-primary-500 hover:bg-primary-600\"\n                      disabled={generateContent.isPending}\n                    >\n                      {generateContent.isPending ? \"Generating...\" : \"Generate\"}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Website Selector */}\n        <div className=\"mb-6\">\n          <Label htmlFor=\"websiteSelect\" className=\"text-sm font-medium text-gray-700\">\n            Select Website to View Content\n          </Label>\n          <Select value={selectedWebsite} onValueChange={setSelectedWebsite}>\n            <SelectTrigger className=\"w-64 mt-1\">\n              <SelectValue placeholder=\"Choose a website...\" />\n            </SelectTrigger>\n            <SelectContent>\n              {websites?.map((website) => (\n                <SelectItem key={website.id} value={website.id}>\n                  {website.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Content Generation Stats */}\n        {selectedWebsite && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600\">Total Content</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-gray-900\">\n                  {content?.length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600\">Published</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {content?.filter(c => c.status === \"published\").length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600\">Drafts</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-gray-600\">\n                  {content?.filter(c => c.status === \"draft\").length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm font-medium text-gray-600\">Scheduled</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  {content?.filter(c => c.status === \"scheduled\").length || 0}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Content List */}\n        {selectedWebsite && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Generated Content</CardTitle>\n              <CardDescription>\n                Manage AI-generated content for {getWebsiteName(selectedWebsite)}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"text-gray-500\">Loading content...</div>\n                </div>\n              ) : content && content.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {content.map((item) => (\n                    <div key={item.id} className=\"border rounded-lg p-4 hover:shadow-sm transition-shadow\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h3 className=\"font-medium text-gray-900\">{item.title}</h3>\n                            <Badge className={getStatusColor(item.status)}>\n                              <div className=\"flex items-center space-x-1\">\n                                {getStatusIcon(item.status)}\n                                <span className=\"capitalize\">{item.status}</span>\n                              </div>\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mb-2 line-clamp-2\">\n                            {item.body.substring(0, 200)}...\n                          </p>\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                            <span>AI Model: {item.aiModel}</span>\n                            <span>Keywords: {item.seoKeywords.join(\", \")}</span>\n                            <span>Created: {formatDistanceToNow(new Date(item.createdAt), { addSuffix: true })}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          {item.status === \"draft\" && (\n                            <Button\n                              size=\"sm\"\n                              onClick={() => publishContent.mutate(item.id)}\n                              disabled={publishContent.isPending}\n                              className=\"bg-green-600 hover:bg-green-700\"\n                            >\n                              <Play className=\"w-3 h-3 mr-1\" />\n                              Publish\n                            </Button>\n                          )}\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Edit className=\"w-3 h-3 mr-1\" />\n                            Edit\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 hover:text-red-700\">\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Bot className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No content generated yet</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Start by generating your first AI-powered content piece.\n                  </p>\n                  <div className=\"mt-6\">\n                    <Button\n                      onClick={() => setIsGenerateDialogOpen(true)}\n                      className=\"bg-primary-500 hover:bg-primary-600\"\n                    >\n                      <Sparkles className=\"w-4 h-4 mr-2\" />\n                      Generate Content\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {!selectedWebsite && (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <Bot className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Select a website</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Choose a website to view and manage its AI-generated content.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":17116},"client/src/pages/content-schedule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, Clock, Plus, Edit, Trash2, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { api } from \"@/lib/api\";\nimport { format, addDays, isToday, isTomorrow, isPast } from \"date-fns\";\n\n// Mock scheduled content data\nconst getScheduledContent = () => [\n  {\n    id: \"1\",\n    websiteId: \"1\",\n    title: \"Latest WordPress Security Tips\",\n    excerpt: \"Keep your WordPress site secure with these essential security practices...\",\n    scheduledDate: addDays(new Date(), 1),\n    status: \"scheduled\",\n    aiModel: \"gpt-4o\",\n    keywords: [\"wordpress\", \"security\", \"tips\"],\n  },\n  {\n    id: \"2\",\n    websiteId: \"2\",\n    title: \"E-commerce SEO Best Practices\",\n    excerpt: \"Boost your online store's visibility with proven SEO strategies...\",\n    scheduledDate: addDays(new Date(), 3),\n    status: \"scheduled\",\n    aiModel: \"claude-3\",\n    keywords: [\"ecommerce\", \"seo\", \"optimization\"],\n  },\n  {\n    id: \"3\",\n    websiteId: \"1\",\n    title: \"WordPress Performance Optimization\",\n    excerpt: \"Speed up your WordPress site with these performance tips...\",\n    scheduledDate: addDays(new Date(), 7),\n    status: \"scheduled\",\n    aiModel: \"gpt-4o\",\n    keywords: [\"wordpress\", \"performance\", \"speed\"],\n  },\n  {\n    id: \"4\",\n    websiteId: \"3\",\n    title: \"Local SEO for Restaurants\",\n    excerpt: \"Attract more local customers with restaurant-specific SEO techniques...\",\n    scheduledDate: addDays(new Date(), -1),\n    status: \"published\",\n    aiModel: \"gpt-4o\",\n    keywords: [\"restaurant\", \"local seo\", \"marketing\"],\n  },\n];\n\nconst getStatusBadge = (status: string, date: Date) => {\n  if (status === \"published\") {\n    return <Badge className=\"bg-green-100 text-green-800\">Published</Badge>;\n  }\n  if (isPast(date) && status === \"scheduled\") {\n    return <Badge className=\"bg-red-100 text-red-800\">Failed</Badge>;\n  }\n  if (isToday(date)) {\n    return <Badge className=\"bg-blue-100 text-blue-800\">Today</Badge>;\n  }\n  if (isTomorrow(date)) {\n    return <Badge className=\"bg-yellow-100 text-yellow-800\">Tomorrow</Badge>;\n  }\n  return <Badge className=\"bg-gray-100 text-gray-800\">Scheduled</Badge>;\n};\n\nconst getDateLabel = (date: Date) => {\n  if (isToday(date)) return \"Today\";\n  if (isTomorrow(date)) return \"Tomorrow\";\n  return format(date, \"MMM dd, yyyy\");\n};\n\nexport default function ContentSchedule() {\n  const [selectedWebsite, setSelectedWebsite] = useState<string>(\"\");\n  const [isScheduleDialogOpen, setIsScheduleDialogOpen] = useState(false);\n\n  const { data: websites } = useQuery({\n    queryKey: [\"/api/websites\"],\n    queryFn: api.getWebsites,\n  });\n\n  // Mock data for scheduled content\n  const scheduledContent = getScheduledContent();\n  \n  const filteredContent = selectedWebsite \n    ? scheduledContent.filter(content => content.websiteId === selectedWebsite)\n    : scheduledContent;\n\n  const getWebsiteName = (websiteId: string) => {\n    const website = websites?.find(w => w.id === websiteId);\n    return website?.name || \"Unknown Website\";\n  };\n\n  const upcomingContent = filteredContent.filter(c => \n    c.status === \"scheduled\" && !isPast(c.scheduledDate)\n  ).length;\n\n  const publishedToday = filteredContent.filter(c => \n    c.status === \"published\" && isToday(c.scheduledDate)\n  ).length;\n\n  const failedPosts = filteredContent.filter(c => \n    c.status === \"scheduled\" && isPast(c.scheduledDate)\n  ).length;\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        {/* Page Header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-8\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n              Content Schedule\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Manage automated content publishing schedules\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Dialog open={isScheduleDialogOpen} onOpenChange={setIsScheduleDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary-500 hover:bg-primary-600 text-white\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Schedule Content\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-lg\">\n                <DialogHeader>\n                  <DialogTitle>Schedule New Content</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"website\">Website</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select website\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {websites?.map((website) => (\n                          <SelectItem key={website.id} value={website.id}>\n                            {website.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"title\">Content Title</Label>\n                    <Input id=\"title\" placeholder=\"Enter content title\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"date\">Publish Date</Label>\n                    <Input id=\"date\" type=\"date\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"time\">Publish Time</Label>\n                    <Input id=\"time\" type=\"time\" defaultValue=\"09:00\" />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"excerpt\">Content Brief</Label>\n                    <Textarea \n                      id=\"excerpt\" \n                      placeholder=\"Brief description of the content to be generated\"\n                      rows={3}\n                    />\n                  </div>\n                  <div className=\"flex space-x-3 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      onClick={() => setIsScheduleDialogOpen(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      className=\"flex-1 bg-primary-500 hover:bg-primary-600\"\n                    >\n                      Schedule\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Website Filter */}\n        <div className=\"mb-6\">\n          <Select value={selectedWebsite} onValueChange={setSelectedWebsite}>\n            <SelectTrigger className=\"w-64\">\n              <SelectValue placeholder=\"All websites\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All websites</SelectItem>\n              {websites?.map((website) => (\n                <SelectItem key={website.id} value={website.id}>\n                  {website.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Schedule Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Upcoming Posts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">{upcomingContent}</div>\n              <p className=\"text-xs text-gray-500 mt-1\">Scheduled for publishing</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Published Today</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{publishedToday}</div>\n              <p className=\"text-xs text-gray-500 mt-1\">Successfully published</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Failed Posts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{failedPosts}</div>\n              <p className=\"text-xs text-gray-500 mt-1\">Need attention</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Auto-Publishing</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {websites?.filter(w => w.autoPosting).length || 0}\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">Sites with auto-posting</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Scheduled Content List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Scheduled Content</CardTitle>\n            <CardDescription>\n              Manage your automated content publishing schedule\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {filteredContent.length > 0 ? (\n              <div className=\"space-y-4\">\n                {filteredContent\n                  .sort((a, b) => a.scheduledDate.getTime() - b.scheduledDate.getTime())\n                  .map((content) => (\n                    <div key={content.id} className=\"border rounded-lg p-4 hover:shadow-sm transition-shadow\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h3 className=\"font-medium text-gray-900\">{content.title}</h3>\n                            {getStatusBadge(content.status, content.scheduledDate)}\n                          </div>\n                          \n                          <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                            {content.excerpt}\n                          </p>\n                          \n                          <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                            <span className=\"flex items-center\">\n                              <Calendar className=\"w-3 h-3 mr-1\" />\n                              {getDateLabel(content.scheduledDate)}\n                            </span>\n                            <span className=\"flex items-center\">\n                              <Clock className=\"w-3 h-3 mr-1\" />\n                              {format(content.scheduledDate, \"HH:mm\")}\n                            </span>\n                            <span>Website: {getWebsiteName(content.websiteId)}</span>\n                            <span>AI: {content.aiModel}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-1 mt-2\">\n                            {content.keywords.map((keyword) => (\n                              <Badge key={keyword} variant=\"outline\" className=\"text-xs\">\n                                {keyword}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          {content.status === \"scheduled\" && !isPast(content.scheduledDate) && (\n                            <>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Edit className=\"w-3 h-3 mr-1\" />\n                                Edit\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 hover:text-red-700\">\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </>\n                          )}\n                          \n                          {content.status === \"published\" && (\n                            <div className=\"flex items-center text-green-600\">\n                              <CheckCircle className=\"w-4 h-4 mr-1\" />\n                              <span className=\"text-sm\">Published</span>\n                            </div>\n                          )}\n                          \n                          {isPast(content.scheduledDate) && content.status === \"scheduled\" && (\n                            <div className=\"flex items-center text-red-600\">\n                              <AlertCircle className=\"w-4 h-4 mr-1\" />\n                              <span className=\"text-sm\">Failed</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Calendar className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No scheduled content</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  {selectedWebsite \n                    ? \"No content scheduled for this website.\" \n                    : \"Start by scheduling your first content piece.\"\n                  }\n                </p>\n                <div className=\"mt-6\">\n                  <Button\n                    onClick={() => setIsScheduleDialogOpen(true)}\n                    className=\"bg-primary-500 hover:bg-primary-600\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Schedule Content\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Auto-Publishing Settings */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Auto-Publishing Settings</CardTitle>\n            <CardDescription>\n              Configure automatic content generation and publishing schedules\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {websites?.map((website) => (\n                <div key={website.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">{website.name}</h4>\n                    <p className=\"text-sm text-gray-500\">\n                      {website.autoPosting \n                        ? \"Auto-posting enabled • 2 posts per week\" \n                        : \"Auto-posting disabled\"\n                      }\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={website.autoPosting ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                      {website.autoPosting ? \"Enabled\" : \"Disabled\"}\n                    </Badge>\n                    <Button size=\"sm\" variant=\"outline\">\n                      Configure\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16378},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Globe, Bot, Search, Calendar, TrendingUp } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport StatsCard from \"@/components/dashboard/stats-card\";\nimport PerformanceChart from \"@/components/dashboard/performance-chart\";\nimport RecentActivity from \"@/components/dashboard/recent-activity\";\nimport WebsitesTable from \"@/components/dashboard/websites-table\";\nimport ContentQueue from \"@/components/dashboard/content-queue\";\nimport SEOIssues from \"@/components/dashboard/seo-issues\";\nimport ClientReports from \"@/components/dashboard/client-reports\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: api.getDashboardStats,\n  });\n\n  return (\n    <div className=\"py-4 sm:py-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Page Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 sm:mb-8\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-xl sm:text-2xl lg:text-3xl font-bold leading-7 text-gray-900 truncate\">\n              Dashboard Overview\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Monitor your WordPress sites and AI-powered SEO optimization\n            </p>\n          </div>\n          <div className=\"mt-4 sm:mt-0 sm:ml-4\">\n            <Button variant=\"outline\" className=\"inline-flex items-center w-full sm:w-auto justify-center\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 gap-4 sm:gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-6 sm:mb-8\">\n          <StatsCard\n            title=\"Active Websites\"\n            value={statsLoading ? \"...\" : stats?.activeWebsites || 0}\n            icon={Globe}\n            iconColor=\"bg-blue-500\"\n          />\n          <StatsCard\n            title=\"Content Generated\"\n            value={statsLoading ? \"...\" : stats?.contentGenerated || 0}\n            icon={Bot}\n            iconColor=\"bg-green-500\"\n          />\n          <StatsCard\n            title=\"Avg SEO Score\"\n            value={statsLoading ? \"...\" : stats?.avgSeoScore || 0}\n            icon={Search}\n            iconColor=\"bg-yellow-500\"\n            change=\"+5%\"\n            changeType=\"positive\"\n          />\n          <StatsCard\n            title=\"Scheduled Posts\"\n            value={statsLoading ? \"...\" : stats?.scheduledPosts || 0}\n            icon={Calendar}\n            iconColor=\"bg-purple-500\"\n          />\n        </div>\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          {/* Website Performance Chart */}\n          <div className=\"lg:col-span-2\">\n            <PerformanceChart />\n          </div>\n\n          {/* Recent Activity */}\n          <div>\n            <RecentActivity />\n          </div>\n        </div>\n\n        {/* Websites Table */}\n        <div className=\"mb-8\">\n          <WebsitesTable />\n        </div>\n\n        {/* AI Content Generation Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <ContentQueue />\n          <SEOIssues />\n        </div>\n\n        {/* Client Reports Section */}\n        <ClientReports />\n      </div>\n    </div>\n  );\n}\n","size_bytes":3516},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Download, TrendingUp, TrendingDown, Calendar, FileText, BarChart3, Minus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { api } from \"@/lib/api\";\nimport { format, subMonths, subWeeks } from \"date-fns\";\n\n// Mock report data\nconst getClientReports = () => [\n  {\n    id: \"1\",\n    websiteId: \"1\",\n    websiteName: \"TechBlog.com\",\n    reportType: \"monthly\",\n    period: \"November 2024\",\n    generatedAt: subMonths(new Date(), 0),\n    data: {\n      seoScoreChange: 8,\n      contentPublished: 12,\n      trafficChange: 24,\n      keywordRankings: 45,\n      backlinks: 23,\n      pageViews: 15420,\n      organicTraffic: 8960,\n      conversionRate: 3.2,\n    },\n  },\n  {\n    id: \"2\",\n    websiteId: \"2\",\n    websiteName: \"E-Commerce.store\",\n    reportType: \"weekly\",\n    period: \"Week 46, 2024\",\n    generatedAt: subWeeks(new Date(), 1),\n    data: {\n      seoScoreChange: 2,\n      contentPublished: 3,\n      trafficChange: 15,\n      keywordRankings: 32,\n      backlinks: 8,\n      pageViews: 8750,\n      organicTraffic: 5200,\n      conversionRate: 4.8,\n    },\n  },\n  {\n    id: \"3\",\n    websiteId: \"3\",\n    websiteName: \"RestaurantSite.com\",\n    reportType: \"monthly\",\n    period: \"November 2024\",\n    generatedAt: subMonths(new Date(), 0),\n    data: {\n      seoScoreChange: -3,\n      contentPublished: 6,\n      trafficChange: 0,\n      keywordRankings: 18,\n      backlinks: 12,\n      pageViews: 3420,\n      organicTraffic: 2100,\n      conversionRate: 2.1,\n    },\n  },\n];\n\nconst getTrendIcon = (change: number) => {\n  if (change > 0) return <TrendingUp className=\"w-3 h-3\" />;\n  if (change < 0) return <TrendingDown className=\"w-3 h-3\" />;\n  return <Minus className=\"w-3 h-3\" />;\n};\n\nconst getTrendColor = (change: number) => {\n  if (change > 0) return \"text-green-600\";\n  if (change < 0) return \"text-red-600\";\n  return \"text-gray-600\";\n};\n\nconst formatNumber = (num: number) => {\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1) + \"k\";\n  }\n  return num.toString();\n};\n\nexport default function Reports() {\n  const [selectedWebsite, setSelectedWebsite] = useState<string>(\"\");\n  const [reportType, setReportType] = useState<string>(\"all\");\n\n  const { data: websites } = useQuery({\n    queryKey: [\"/api/websites\"],\n    queryFn: api.getWebsites,\n  });\n\n  // Mock data for reports\n  const allReports = getClientReports();\n  \n  const filteredReports = allReports.filter(report => {\n    if (selectedWebsite && report.websiteId !== selectedWebsite) return false;\n    if (reportType !== \"all\" && report.reportType !== reportType) return false;\n    return true;\n  });\n\n  const getWebsiteName = (websiteId: string) => {\n    const website = websites?.find(w => w.id === websiteId);\n    return website?.name || \"Unknown Website\";\n  };\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        {/* Page Header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-8\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n              Client Reports\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Comprehensive SEO and content performance reports for your clients\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Button className=\"bg-primary-500 hover:bg-primary-600 text-white\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Generate Report\n            </Button>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n          <Select value={selectedWebsite} onValueChange={setSelectedWebsite}>\n            <SelectTrigger className=\"w-64\">\n              <SelectValue placeholder=\"All websites\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All websites</SelectItem>\n              {websites?.map((website) => (\n                <SelectItem key={website.id} value={website.id}>\n                  {website.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select value={reportType} onValueChange={setReportType}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All report types</SelectItem>\n              <SelectItem value=\"weekly\">Weekly reports</SelectItem>\n              <SelectItem value=\"monthly\">Monthly reports</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Reports Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Total Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\">{filteredReports.length}</div>\n              <p className=\"text-xs text-gray-500 mt-1\">Generated reports</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Monthly Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {filteredReports.filter(r => r.reportType === \"monthly\").length}\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">Comprehensive analysis</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Weekly Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {filteredReports.filter(r => r.reportType === \"weekly\").length}\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">Quick updates</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Avg Performance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {Math.round(\n                  filteredReports.reduce((sum, r) => sum + r.data.seoScoreChange, 0) / \n                  Math.max(filteredReports.length, 1)\n                )}%\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">SEO improvement</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Reports List */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredReports.map((report) => (\n            <Card key={report.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg\">{report.websiteName}</CardTitle>\n                  <Badge variant={report.reportType === \"monthly\" ? \"default\" : \"secondary\"}>\n                    {report.reportType}\n                  </Badge>\n                </div>\n                <CardDescription>{report.period}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"overview\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                    <TabsTrigger value=\"details\">Details</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"overview\" className=\"space-y-3 mt-4\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">SEO Score</span>\n                      <span className={`font-medium flex items-center ${getTrendColor(report.data.seoScoreChange)}`}>\n                        {getTrendIcon(report.data.seoScoreChange)}\n                        <span className=\"ml-1\">\n                          {report.data.seoScoreChange > 0 ? '+' : ''}{report.data.seoScoreChange}%\n                        </span>\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Content Published</span>\n                      <span className=\"font-medium\">{report.data.contentPublished} posts</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Traffic Change</span>\n                      <span className={`font-medium flex items-center ${getTrendColor(report.data.trafficChange)}`}>\n                        {report.data.trafficChange !== 0 && getTrendIcon(report.data.trafficChange)}\n                        <span className=\"ml-1\">\n                          {report.data.trafficChange > 0 ? '+' : ''}\n                          {report.data.trafficChange === 0 ? 'Stable' : `${report.data.trafficChange}%`}\n                        </span>\n                      </span>\n                    </div>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"details\" className=\"space-y-3 mt-4\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Page Views</span>\n                      <span className=\"font-medium\">{formatNumber(report.data.pageViews)}</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Organic Traffic</span>\n                      <span className=\"font-medium\">{formatNumber(report.data.organicTraffic)}</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Keywords Ranking</span>\n                      <span className=\"font-medium\">{report.data.keywordRankings}</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">New Backlinks</span>\n                      <span className=\"font-medium\">{report.data.backlinks}</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Conversion Rate</span>\n                      <span className=\"font-medium\">{report.data.conversionRate}%</span>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n                \n                <div className=\"flex items-center justify-between mt-4 pt-4 border-t\">\n                  <span className=\"text-xs text-gray-500\">\n                    Generated {format(report.generatedAt, \"MMM dd, yyyy\")}\n                  </span>\n                  <Button size=\"sm\" variant=\"outline\" className=\"text-primary-600\">\n                    <Download className=\"w-3 h-3 mr-1\" />\n                    PDF\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredReports.length === 0 && (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <FileText className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No reports found</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                {selectedWebsite || reportType !== \"all\"\n                  ? \"No reports match your current filters.\"\n                  : \"Reports will appear here once they are generated.\"\n                }\n              </p>\n              <div className=\"mt-6\">\n                <Button className=\"bg-primary-500 hover:bg-primary-600\">\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Generate Report\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Report Generation Settings */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Automated Report Settings</CardTitle>\n            <CardDescription>\n              Configure automatic report generation schedules\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {websites?.map((website) => (\n                <div key={website.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">{website.name}</h4>\n                    <p className=\"text-sm text-gray-500\">\n                      Weekly reports on Mondays, Monthly reports on 1st of each month\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                    <Button size=\"sm\" variant=\"outline\">\n                      Configure\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14163},"client/src/pages/seo-analysis.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Search, Play, AlertTriangle, CheckCircle, AlertCircle, TrendingUp, ExternalLink, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst getScoreColor = (score: number) => {\n  if (score >= 80) return \"text-green-600\";\n  if (score >= 60) return \"text-yellow-600\";\n  return \"text-red-600\";\n};\n\nconst getScoreGradient = (score: number) => {\n  if (score >= 80) return \"from-green-500 to-green-600\";\n  if (score >= 60) return \"from-yellow-500 to-yellow-600\";\n  return \"from-red-500 to-red-600\";\n};\n\nconst getIssueIcon = (type: string) => {\n  switch (type) {\n    case \"critical\":\n      return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n    case \"warning\":\n      return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\n    case \"info\":\n      return <CheckCircle className=\"w-4 h-4 text-blue-500\" />;\n    default:\n      return <AlertCircle className=\"w-4 h-4 text-gray-500\" />;\n  }\n};\n\nconst getIssueColor = (type: string) => {\n  switch (type) {\n    case \"critical\":\n      return \"bg-red-50 border-red-200 text-red-800\";\n    case \"warning\":\n      return \"bg-yellow-50 border-yellow-200 text-yellow-800\";\n    case \"info\":\n      return \"bg-blue-50 border-blue-200 text-blue-800\";\n    default:\n      return \"bg-gray-50 border-gray-200 text-gray-800\";\n  }\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"high\":\n      return \"bg-red-100 text-red-800\";\n    case \"medium\":\n      return \"bg-yellow-100 text-yellow-800\";\n    case \"low\":\n      return \"bg-green-100 text-green-800\";\n    default:\n      return \"bg-gray-100 text-gray-800\";\n  }\n};\n\nexport default function SEOAnalysis() {\n  const [selectedWebsite, setSelectedWebsite] = useState<string>(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: websites } = useQuery({\n    queryKey: [\"/api/websites\"],\n    queryFn: api.getWebsites,\n  });\n\n  const { data: seoReports, isLoading } = useQuery({\n    queryKey: [\"/api/seo-reports\", selectedWebsite],\n    queryFn: () => selectedWebsite ? api.getSeoReports(selectedWebsite) : Promise.resolve([]),\n    enabled: !!selectedWebsite,\n  });\n\n  const runAnalysis = useMutation({\n    mutationFn: () => api.runSeoAnalysis(selectedWebsite),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/seo-reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/websites\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activity-logs\"] });\n      toast({\n        title: \"SEO Analysis Complete\",\n        description: \"Your website has been analyzed and recommendations are ready.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message || \"Failed to run SEO analysis. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const performAutoFix = useMutation({\n    mutationFn: ({ issueType }: { issueType: string }) => api.performAutoFix(selectedWebsite, issueType),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/seo-reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activity-logs\"] });\n      toast({\n        title: data.success ? \"Auto-Fix Applied\" : \"Auto-Fix Failed\",\n        description: data.message,\n        variant: data.success ? \"default\" : \"destructive\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Auto-Fix Failed\",\n        description: \"Failed to apply auto-fix. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getWebsiteName = (websiteId: string) => {\n    const website = websites?.find(w => w.id === websiteId);\n    return website?.name || \"Unknown Website\";\n  };\n\n  const latestReport = seoReports?.[0];\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        {/* Page Header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-8\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n              SEO Analysis\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Comprehensive SEO analysis and automated optimization recommendations\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Button\n              onClick={() => runAnalysis.mutate()}\n              disabled={!selectedWebsite || runAnalysis.isPending}\n              className=\"bg-primary-500 hover:bg-primary-600 text-white\"\n            >\n              {runAnalysis.isPending ? (\n                <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <Search className=\"w-4 h-4 mr-2\" />\n              )}\n              {runAnalysis.isPending ? \"Analyzing...\" : \"Run Analysis\"}\n            </Button>\n          </div>\n        </div>\n\n        {/* Website Selector */}\n        <div className=\"mb-6\">\n          <Select value={selectedWebsite} onValueChange={setSelectedWebsite}>\n            <SelectTrigger className=\"w-64\">\n              <SelectValue placeholder=\"Select website to analyze...\" />\n            </SelectTrigger>\n            <SelectContent>\n              {websites?.map((website) => (\n                <SelectItem key={website.id} value={website.id}>\n                  {website.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {selectedWebsite && latestReport && (\n          <>\n            {/* SEO Score Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <Card className=\"md:col-span-2\">\n                <CardHeader>\n                  <CardTitle>Overall SEO Score</CardTitle>\n                  <CardDescription>\n                    Analysis completed {formatDistanceToNow(new Date(latestReport.createdAt), { addSuffix: true })}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`text-6xl font-bold ${getScoreColor(latestReport.score)}`}>\n                      {latestReport.score}\n                    </div>\n                    <div className=\"flex-1\">\n                      <Progress \n                        value={latestReport.score} \n                        className=\"w-full h-4 mb-2\"\n                      />\n                      <p className=\"text-sm text-gray-600\">\n                        {latestReport.score >= 80 ? \"Excellent\" :\n                         latestReport.score >= 60 ? \"Good\" : \"Needs Improvement\"}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Page Speed Score</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-3xl font-bold ${getScoreColor(latestReport.pageSpeedScore || 0)}`}>\n                    {latestReport.pageSpeedScore || \"N/A\"}\n                  </div>\n                  <p className=\"text-sm text-gray-600 mt-2\">\n                    Google PageSpeed Insights\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Issues and Recommendations Grid */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n              {/* SEO Issues */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <AlertTriangle className=\"w-5 h-5 mr-2 text-red-500\" />\n                    SEO Issues\n                  </CardTitle>\n                  <CardDescription>\n                    Issues found that need attention\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {latestReport.issues && latestReport.issues.length > 0 ? (\n                      (latestReport.issues as any[]).map((issue, index) => (\n                        <div key={index} className={`p-4 rounded-lg border ${getIssueColor(issue.type)}`}>\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-start space-x-3\">\n                              {getIssueIcon(issue.type)}\n                              <div className=\"flex-1\">\n                                <h4 className=\"font-medium\">{issue.title}</h4>\n                                <p className=\"text-sm mt-1 opacity-90\">{issue.description}</p>\n                                {issue.affectedPages > 0 && (\n                                  <p className=\"text-xs mt-2 opacity-75\">\n                                    {issue.affectedPages} pages affected\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                            {issue.autoFixAvailable && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => performAutoFix.mutate({ issueType: issue.title })}\n                                disabled={performAutoFix.isPending}\n                                className=\"ml-2\"\n                              >\n                                {performAutoFix.isPending ? \"Fixing...\" : \"Auto-Fix\"}\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <CheckCircle className=\"mx-auto h-12 w-12 text-green-500\" />\n                        <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No issues found</h3>\n                        <p className=\"mt-1 text-sm text-gray-500\">\n                          Your website is performing well!\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recommendations */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <TrendingUp className=\"w-5 h-5 mr-2 text-blue-500\" />\n                    Recommendations\n                  </CardTitle>\n                  <CardDescription>\n                    Suggestions to improve your SEO\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {latestReport.recommendations && latestReport.recommendations.length > 0 ? (\n                      (latestReport.recommendations as any[]).map((rec, index) => (\n                        <div key={index} className=\"p-4 rounded-lg border border-gray-200 bg-gray-50\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-1\">\n                                <h4 className=\"font-medium text-gray-900\">{rec.title}</h4>\n                                <Badge className={getPriorityColor(rec.priority)}>\n                                  {rec.priority}\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm text-gray-600 mb-2\">{rec.description}</p>\n                              <p className=\"text-xs text-green-600 font-medium\">\n                                Impact: {rec.impact}\n                              </p>\n                            </div>\n                            <Button size=\"sm\" variant=\"ghost\">\n                              <ExternalLink className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <CheckCircle className=\"mx-auto h-12 w-12 text-green-500\" />\n                        <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No recommendations</h3>\n                        <p className=\"mt-1 text-sm text-gray-500\">\n                          Your SEO is optimized!\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Analysis History */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Analysis History</CardTitle>\n                <CardDescription>\n                  Previous SEO analysis results for {getWebsiteName(selectedWebsite)}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"text-gray-500\">Loading analysis history...</div>\n                  </div>\n                ) : seoReports && seoReports.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {seoReports.map((report) => (\n                      <div key={report.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className={`text-2xl font-bold ${getScoreColor(report.score)}`}>\n                            {report.score}\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900\">\n                              SEO Score: {report.score}/100\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              {formatDistanceToNow(new Date(report.createdAt), { addSuffix: true })}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          {report.pageSpeedScore && (\n                            <Badge variant=\"outline\">\n                              Speed: {report.pageSpeedScore}\n                            </Badge>\n                          )}\n                          <Badge variant=\"outline\">\n                            Issues: {(report.issues as any[])?.length || 0}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Search className=\"mx-auto h-12 w-12 text-gray-400\" />\n                    <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No analysis history</h3>\n                    <p className=\"mt-1 text-sm text-gray-500\">\n                      Run your first SEO analysis to see results here.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </>\n        )}\n\n        {!selectedWebsite && (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <Search className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Select a website</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Choose a website to run SEO analysis and view recommendations.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":16441},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Save, Key, Globe, Bot, Bell, Shield, User, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\n// Mock settings data\nconst getSettings = () => ({\n  profile: {\n    name: \"John Doe\",\n    email: \"john@example.com\",\n    company: \"Digital Marketing Agency\",\n    timezone: \"America/New_York\",\n  },\n  apiKeys: {\n    openai: \"sk-...\",\n    claude: \"sk-...\",\n    googlePageSpeed: \"AIza...\",\n  },\n  notifications: {\n    emailReports: true,\n    contentGenerated: true,\n    seoIssues: true,\n    systemAlerts: false,\n  },\n  automation: {\n    defaultAiModel: \"gpt-4o\",\n    autoFixSeoIssues: true,\n    contentGenerationFrequency: \"twice-weekly\",\n    reportGeneration: \"weekly\",\n  },\n  security: {\n    twoFactorAuth: false,\n    sessionTimeout: 24,\n    allowApiAccess: true,\n  },\n});\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [settings, setSettings] = useState(getSettings());\n  const [activeTab, setActiveTab] = useState(\"profile\");\n\n  const { data: websites } = useQuery({\n    queryKey: [\"/api/websites\"],\n    queryFn: api.getWebsites,\n  });\n\n  const updateSettings = useMutation({\n    mutationFn: async (newSettings: any) => {\n      // Mock API call - in real app this would save to backend\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return newSettings;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Saved\",\n        description: \"Your settings have been successfully updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateSettings.mutate(settings);\n  };\n\n  const updateSetting = (section: string, key: string, value: any) => {\n    setSettings(prev => ({\n      ...prev,\n      [section]: {\n        ...prev[section as keyof typeof prev],\n        [key]: value,\n      },\n    }));\n  };\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 md:px-8\">\n        {/* Page Header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-8\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n              Settings\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Manage your account, integrations, and automation preferences\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Button \n              onClick={handleSave} \n              disabled={updateSettings.isPending}\n              className=\"bg-primary-500 hover:bg-primary-600\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {updateSettings.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n            <TabsTrigger value=\"integrations\">Integrations</TabsTrigger>\n            <TabsTrigger value=\"automation\">Automation</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            <TabsTrigger value=\"security\">Security</TabsTrigger>\n          </TabsList>\n\n          {/* Profile Settings */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <User className=\"w-5 h-5 mr-2\" />\n                  Profile Information\n                </CardTitle>\n                <CardDescription>\n                  Update your personal information and preferences\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={settings.profile.name}\n                      onChange={(e) => updateSetting(\"profile\", \"name\", e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={settings.profile.email}\n                      onChange={(e) => updateSetting(\"profile\", \"email\", e.target.value)}\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"company\">Company</Label>\n                  <Input\n                    id=\"company\"\n                    value={settings.profile.company}\n                    onChange={(e) => updateSetting(\"profile\", \"company\", e.target.value)}\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"timezone\">Timezone</Label>\n                  <Select\n                    value={settings.profile.timezone}\n                    onValueChange={(value) => updateSetting(\"profile\", \"timezone\", value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"America/New_York\">Eastern Time (ET)</SelectItem>\n                      <SelectItem value=\"America/Chicago\">Central Time (CT)</SelectItem>\n                      <SelectItem value=\"America/Denver\">Mountain Time (MT)</SelectItem>\n                      <SelectItem value=\"America/Los_Angeles\">Pacific Time (PT)</SelectItem>\n                      <SelectItem value=\"UTC\">UTC</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Integrations */}\n          <TabsContent value=\"integrations\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Key className=\"w-5 h-5 mr-2\" />\n                  API Keys\n                </CardTitle>\n                <CardDescription>\n                  Configure your AI and third-party service integrations\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"openai\">OpenAI API Key</Label>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Input\n                      id=\"openai\"\n                      type=\"password\"\n                      value={settings.apiKeys.openai}\n                      onChange={(e) => updateSetting(\"apiKeys\", \"openai\", e.target.value)}\n                      placeholder=\"sk-...\"\n                    />\n                    <Badge className=\"bg-green-100 text-green-800\">Connected</Badge>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Required for GPT-4 content generation\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"claude\">Anthropic Claude API Key</Label>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Input\n                      id=\"claude\"\n                      type=\"password\"\n                      value={settings.apiKeys.claude}\n                      onChange={(e) => updateSetting(\"apiKeys\", \"claude\", e.target.value)}\n                      placeholder=\"sk-...\"\n                    />\n                    <Badge className=\"bg-green-100 text-green-800\">Connected</Badge>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Required for Claude-3 content generation\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"pageSpeed\">Google PageSpeed Insights API Key</Label>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Input\n                      id=\"pageSpeed\"\n                      type=\"password\"\n                      value={settings.apiKeys.googlePageSpeed}\n                      onChange={(e) => updateSetting(\"apiKeys\", \"googlePageSpeed\", e.target.value)}\n                      placeholder=\"AIza...\"\n                    />\n                    <Badge className=\"bg-green-100 text-green-800\">Connected</Badge>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Required for automated SEO analysis\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>WordPress Connections</CardTitle>\n                <CardDescription>\n                  Manage your connected WordPress websites\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {websites?.map((website) => (\n                    <div key={website.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Globe className=\"w-5 h-5 text-gray-400\" />\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{website.name}</p>\n                          <p className=\"text-sm text-gray-500\">{website.url}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={\n                          website.status === \"active\" ? \"bg-green-100 text-green-800\" :\n                          website.status === \"processing\" ? \"bg-yellow-100 text-yellow-800\" :\n                          \"bg-red-100 text-red-800\"\n                        }>\n                          {website.status}\n                        </Badge>\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Automation Settings */}\n          <TabsContent value=\"automation\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bot className=\"w-5 h-5 mr-2\" />\n                  Automation Preferences\n                </CardTitle>\n                <CardDescription>\n                  Configure your AI content generation and SEO automation\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"defaultAi\">Default AI Model</Label>\n                  <Select\n                    value={settings.automation.defaultAiModel}\n                    onValueChange={(value) => updateSetting(\"automation\", \"defaultAiModel\", value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"gpt-4o\">GPT-4 (Recommended)</SelectItem>\n                      <SelectItem value=\"claude-3\">Claude-3</SelectItem>\n                      <SelectItem value=\"auto-select\">Auto-Select Best</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    This will be used as the default for new content generation\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"frequency\">Content Generation Frequency</Label>\n                  <Select\n                    value={settings.automation.contentGenerationFrequency}\n                    onValueChange={(value) => updateSetting(\"automation\", \"contentGenerationFrequency\", value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"twice-weekly\">Twice Weekly</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"bi-weekly\">Bi-weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"reports\">Report Generation</Label>\n                  <Select\n                    value={settings.automation.reportGeneration}\n                    onValueChange={(value) => updateSetting(\"automation\", \"reportGeneration\", value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                      <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"autoFix\">Auto-fix SEO Issues</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Automatically apply fixes for common SEO issues\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"autoFix\"\n                    checked={settings.automation.autoFixSeoIssues}\n                    onCheckedChange={(checked) => updateSetting(\"automation\", \"autoFixSeoIssues\", checked)}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notifications */}\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bell className=\"w-5 h-5 mr-2\" />\n                  Notification Preferences\n                </CardTitle>\n                <CardDescription>\n                  Choose what notifications you want to receive\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"emailReports\">Email Reports</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Receive automated reports via email\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"emailReports\"\n                    checked={settings.notifications.emailReports}\n                    onCheckedChange={(checked) => updateSetting(\"notifications\", \"emailReports\", checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"contentGenerated\">Content Generated</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Notify when AI content is generated\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"contentGenerated\"\n                    checked={settings.notifications.contentGenerated}\n                    onCheckedChange={(checked) => updateSetting(\"notifications\", \"contentGenerated\", checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"seoIssues\">SEO Issues</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Alert when SEO issues are detected\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"seoIssues\"\n                    checked={settings.notifications.seoIssues}\n                    onCheckedChange={(checked) => updateSetting(\"notifications\", \"seoIssues\", checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"systemAlerts\">System Alerts</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Receive system maintenance and update notifications\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"systemAlerts\"\n                    checked={settings.notifications.systemAlerts}\n                    onCheckedChange={(checked) => updateSetting(\"notifications\", \"systemAlerts\", checked)}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Security */}\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"w-5 h-5 mr-2\" />\n                  Security Settings\n                </CardTitle>\n                <CardDescription>\n                  Manage your account security and access controls\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"twoFactor\">Two-Factor Authentication</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Add an extra layer of security to your account\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"twoFactor\"\n                    checked={settings.security.twoFactorAuth}\n                    onCheckedChange={(checked) => updateSetting(\"security\", \"twoFactorAuth\", checked)}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"sessionTimeout\">Session Timeout (hours)</Label>\n                  <Input\n                    id=\"sessionTimeout\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"168\"\n                    value={settings.security.sessionTimeout}\n                    onChange={(e) => updateSetting(\"security\", \"sessionTimeout\", parseInt(e.target.value))}\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Automatically log out after this many hours of inactivity\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"apiAccess\">API Access</Label>\n                    <p className=\"text-sm text-gray-500\">\n                      Allow third-party applications to access your data\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"apiAccess\"\n                    checked={settings.security.allowApiAccess}\n                    onCheckedChange={(checked) => updateSetting(\"security\", \"allowApiAccess\", checked)}\n                  />\n                </div>\n\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Change Password</h4>\n                  <div className=\"space-y-3\">\n                    <Input type=\"password\" placeholder=\"Current password\" />\n                    <Input type=\"password\" placeholder=\"New password\" />\n                    <Input type=\"password\" placeholder=\"Confirm new password\" />\n                    <Button variant=\"outline\" size=\"sm\">\n                      Update Password\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21530},"client/src/pages/websites.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Search, Filter } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport WebsitesTable from \"@/components/dashboard/websites-table\";\nimport AddWebsiteForm from \"@/components/forms/add-website-form\";\nimport { api } from \"@/lib/api\";\n\nexport default function Websites() {\n  const [isAddWebsiteOpen, setIsAddWebsiteOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: websites, isLoading } = useQuery({\n    queryKey: [\"/api/websites\"],\n    queryFn: api.getWebsites,\n  });\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n        {/* Page Header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-8\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n              Website Management\n            </h2>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Manage all your connected WordPress websites and their configurations\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Dialog open={isAddWebsiteOpen} onOpenChange={setIsAddWebsiteOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary-500 hover:bg-primary-600 text-white\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Website\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <AddWebsiteForm onSuccess={() => setIsAddWebsiteOpen(false)} />\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Search and Filter Bar */}\n        <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search websites...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <Button variant=\"outline\" className=\"flex items-center\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            Filters\n          </Button>\n        </div>\n\n        {/* Websites Summary Cards */}\n        {!isLoading && websites && (\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <div className=\"bg-white rounded-lg shadow-sm p-6 border\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Total Websites</h3>\n              <p className=\"text-3xl font-bold text-primary-600\">{websites.length}</p>\n              <p className=\"text-sm text-gray-500 mt-2\">Connected WordPress sites</p>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-sm p-6 border\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Active Sites</h3>\n              <p className=\"text-3xl font-bold text-green-600\">\n                {websites.filter(w => w.status === \"active\").length}\n              </p>\n              <p className=\"text-sm text-gray-500 mt-2\">Currently optimizing</p>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-sm p-6 border\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Avg SEO Score</h3>\n              <p className=\"text-3xl font-bold text-yellow-600\">\n                {Math.round(websites.reduce((sum, w) => sum + w.seoScore, 0) / websites.length) || 0}\n              </p>\n              <p className=\"text-sm text-gray-500 mt-2\">Across all websites</p>\n            </div>\n          </div>\n        )}\n\n        {/* Websites Table */}\n        <WebsitesTable />\n      </div>\n    </div>\n  );\n}\n","size_bytes":4061},"client/src/components/dashboard/client-reports.tsx":{"content":"import { Download, TrendingUp, TrendingDown, Minus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\n// Mock client reports data\nconst clientReports = [\n  {\n    id: \"1\",\n    name: \"TechBlog Monthly Report\",\n    period: \"Nov 2024\",\n    seoChange: 8,\n    contentPublished: 12,\n    trafficChange: 24,\n    type: \"monthly\",\n  },\n  {\n    id: \"2\",\n    name: \"E-Commerce Weekly\",\n    period: \"Week 46\",\n    seoChange: 2,\n    contentPublished: 3,\n    trafficChange: 15,\n    type: \"weekly\",\n  },\n  {\n    id: \"3\",\n    name: \"Restaurant Report\",\n    period: \"Nov 2024\",\n    seoChange: -3,\n    contentPublished: 6,\n    trafficChange: 0,\n    type: \"monthly\",\n  },\n];\n\nconst getTrendIcon = (change: number) => {\n  if (change > 0) return <TrendingUp className=\"w-3 h-3\" />;\n  if (change < 0) return <TrendingDown className=\"w-3 h-3\" />;\n  return <Minus className=\"w-3 h-3\" />;\n};\n\nconst getTrendColor = (change: number) => {\n  if (change > 0) return \"text-green-600\";\n  if (change < 0) return \"text-red-600\";\n  return \"text-gray-600\";\n};\n\nexport default function ClientReports() {\n  return (\n    <div className=\"bg-white shadow-sm rounded-lg\">\n      <div className=\"px-6 py-5 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-medium text-gray-900\">Client Reports</h3>\n            <p className=\"text-sm text-gray-500\">Automated weekly and monthly client reports</p>\n          </div>\n          <Button className=\"bg-primary-500 hover:bg-primary-600 text-white\">\n            Generate Report\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {clientReports.map((report) => (\n            <div key={report.id} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"text-sm font-medium text-gray-900\">{report.name}</h4>\n                <span className=\"text-xs text-gray-500\">{report.period}</span>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">SEO Score</span>\n                  <span className={`font-medium flex items-center ${getTrendColor(report.seoChange)}`}>\n                    {getTrendIcon(report.seoChange)}\n                    <span className=\"ml-1\">\n                      {report.seoChange > 0 ? '+' : ''}{report.seoChange}%\n                    </span>\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Content Published</span>\n                  <span className=\"font-medium\">{report.contentPublished} posts</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-500\">Traffic Change</span>\n                  <span className={`font-medium flex items-center ${getTrendColor(report.trafficChange)}`}>\n                    {report.trafficChange !== 0 && getTrendIcon(report.trafficChange)}\n                    <span className=\"ml-1\">\n                      {report.trafficChange > 0 ? '+' : ''}\n                      {report.trafficChange === 0 ? 'Stable' : `${report.trafficChange}%`}\n                    </span>\n                  </span>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full mt-4 text-sm text-primary-600 hover:text-primary-500 font-medium\"\n              >\n                <Download className=\"w-4 h-4 mr-1\" />\n                Download PDF\n              </Button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3919},"client/src/components/dashboard/content-queue.tsx":{"content":"import { Bot, Clock, CheckCircle } from \"lucide-react\";\n\n// Mock content queue data\nconst queueItems = [\n  {\n    id: \"1\",\n    title: \"Latest WordPress Security Tips\",\n    website: \"TechBlog.com\",\n    aiModel: \"GPT-4\",\n    status: \"in_progress\",\n    progress: 65,\n  },\n  {\n    id: \"2\",\n    title: \"Product Review: Smart Home Devices\",\n    website: \"E-Commerce.store\",\n    aiModel: \"Claude-3\",\n    status: \"queued\",\n    progress: 0,\n  },\n  {\n    id: \"3\",\n    title: \"Local SEO for Restaurants 2024\",\n    website: \"RestaurantSite.com\",\n    aiModel: \"GPT-4\",\n    status: \"completed\",\n    progress: 100,\n  },\n];\n\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case \"in_progress\":\n      return <Bot className=\"w-4 h-4 text-white\" />;\n    case \"queued\":\n      return <Clock className=\"w-4 h-4 text-white\" />;\n    case \"completed\":\n      return <CheckCircle className=\"w-4 h-4 text-white\" />;\n    default:\n      return <Bot className=\"w-4 h-4 text-white\" />;\n  }\n};\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"in_progress\":\n      return \"bg-blue-500\";\n    case \"queued\":\n      return \"bg-yellow-500\";\n    case \"completed\":\n      return \"bg-green-500\";\n    default:\n      return \"bg-gray-500\";\n  }\n};\n\nconst getStatusText = (status: string) => {\n  switch (status) {\n    case \"in_progress\":\n      return \"In Progress\";\n    case \"queued\":\n      return \"Queued\";\n    case \"completed\":\n      return \"Completed\";\n    default:\n      return status;\n  }\n};\n\nexport default function ContentQueue() {\n  return (\n    <div className=\"bg-white shadow-sm rounded-lg\">\n      <div className=\"px-6 py-5 border-b border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Content Generation Queue</h3>\n        <p className=\"text-sm text-gray-500\">AI-powered content creation in progress</p>\n      </div>\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {queueItems.map((item) => {\n            const statusColor = getStatusColor(item.status);\n            const statusIcon = getStatusIcon(item.status);\n            const statusText = getStatusText(item.status);\n            \n            return (\n              <div key={item.id} className={`flex items-center space-x-4 p-4 rounded-lg ${\n                item.status === \"in_progress\" ? \"bg-blue-50\" :\n                item.status === \"queued\" ? \"bg-yellow-50\" :\n                item.status === \"completed\" ? \"bg-green-50\" :\n                \"bg-gray-50\"\n              }`}>\n                <div className={`w-10 h-10 ${statusColor} rounded-lg flex items-center justify-center`}>\n                  {statusIcon}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">{item.title}</p>\n                  <p className=\"text-xs text-gray-500\">\n                    {item.website} • {item.aiModel} • {statusText}\n                  </p>\n                  {item.status === \"in_progress\" && (\n                    <div className=\"mt-2 w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\" \n                        style={{ width: `${item.progress}%` }}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3430},"client/src/components/dashboard/performance-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from \"chart.js\";\nimport { api } from \"@/lib/api\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\nexport default function PerformanceChart() {\n  const { data: performanceData, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/performance\"],\n    queryFn: api.getPerformanceData,\n  });\n\n  if (isLoading || !performanceData) {\n    return (\n      <div className=\"bg-white shadow-sm rounded-lg\">\n        <div className=\"px-6 py-5 border-b border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-900\">SEO Performance Trend</h3>\n          <p className=\"text-sm text-gray-500\">Last 7 days performance across all websites</p>\n        </div>\n        <div className=\"p-6 h-64 flex items-center justify-center\">\n          <div className=\"text-gray-500\">Loading chart...</div>\n        </div>\n      </div>\n    );\n  }\n\n  const chartData = {\n    labels: performanceData.map((item: any) => {\n      const date = new Date(item.date);\n      return date.toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\" });\n    }),\n    datasets: [\n      {\n        label: \"Average SEO Score\",\n        data: performanceData.map((item: any) => item.score),\n        borderColor: \"#1976D2\",\n        backgroundColor: \"rgba(25, 118, 210, 0.1)\",\n        borderWidth: 2,\n        fill: true,\n        tension: 0.4,\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n        min: 70,\n        max: 100,\n        grid: {\n          color: \"#f3f4f6\",\n        },\n      },\n      x: {\n        grid: {\n          display: false,\n        },\n      },\n    },\n  };\n\n  return (\n    <div className=\"bg-white shadow-sm rounded-lg\">\n      <div className=\"px-6 py-5 border-b border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-900\">SEO Performance Trend</h3>\n        <p className=\"text-sm text-gray-500\">Last 7 days performance across all websites</p>\n      </div>\n      <div className=\"p-6\" style={{ height: \"300px\" }}>\n        <Line data={chartData} options={options} />\n      </div>\n    </div>\n  );\n}\n","size_bytes":2459},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst activityTypeColors = {\n  content_published: \"bg-green-500\",\n  content_generated: \"bg-blue-500\",\n  content_scheduled: \"bg-yellow-500\",\n  seo_analysis: \"bg-blue-500\",\n  seo_issue: \"bg-red-500\",\n  website_connected: \"bg-purple-500\",\n  seo_autofix: \"bg-green-500\",\n};\n\nexport default function RecentActivity() {\n  const { data: activities, isLoading } = useQuery({\n    queryKey: [\"/api/activity-logs\"],\n    queryFn: () => api.getActivityLogs(),\n  });\n\n  const { data: websites } = useQuery({\n    queryKey: [\"/api/websites\"],\n    queryFn: api.getWebsites,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white shadow-sm rounded-lg\">\n        <div className=\"px-6 py-5 border-b border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Recent Activity</h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"text-gray-500\">Loading activities...</div>\n        </div>\n      </div>\n    );\n  }\n\n  const recentActivities = activities?.slice(0, 4) || [];\n  \n  const getWebsiteName = (websiteId: string) => {\n    const website = websites?.find(w => w.id === websiteId);\n    return website?.name || \"Unknown Website\";\n  };\n\n  return (\n    <div className=\"bg-white shadow-sm rounded-lg\">\n      <div className=\"px-6 py-5 border-b border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Recent Activity</h3>\n      </div>\n      <div className=\"divide-y divide-gray-200\">\n        {recentActivities.map((activity) => {\n          const colorClass = activityTypeColors[activity.type as keyof typeof activityTypeColors] || \"bg-gray-500\";\n          \n          return (\n            <div key={activity.id} className=\"px-6 py-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-2 h-2 ${colorClass} rounded-full`}></div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-gray-900\">{activity.description}</p>\n                  <p className=\"text-xs text-gray-500\">\n                    {activity.websiteId ? getWebsiteName(activity.websiteId) : \"System\"} • {\" \"}\n                    {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}\n                  </p>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"px-6 py-3 bg-gray-50\">\n        <a href=\"/activity-logs\" className=\"text-sm font-medium text-primary-600 hover:text-primary-500\">\n          View all activity →\n        </a>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2683},"client/src/components/dashboard/seo-issues.tsx":{"content":"import { AlertTriangle, AlertCircle, CheckCircle, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\n// Mock SEO issues data\nconst seoIssues = [\n  {\n    id: \"1\",\n    type: \"critical\",\n    title: \"Missing Meta Descriptions\",\n    description: \"Several pages are missing meta descriptions, which are important for search engine results.\",\n    website: \"RestaurantSite.com\",\n    affectedPages: 8,\n    autoFixAvailable: true,\n  },\n  {\n    id: \"2\",\n    type: \"warning\",\n    title: \"Slow Page Load Speed\",\n    description: \"Page load times are above recommended thresholds, affecting user experience and rankings.\",\n    website: \"E-Commerce.store\",\n    affectedPages: 3,\n    autoFixAvailable: false,\n  },\n  {\n    id: \"3\",\n    type: \"success\",\n    title: \"Schema Markup Added\",\n    description: \"All pages now have proper structured data markup for better search visibility.\",\n    website: \"TechBlog.com\",\n    affectedPages: 0,\n    autoFixAvailable: false,\n  },\n];\n\nconst getIssueIcon = (type: string) => {\n  switch (type) {\n    case \"critical\":\n      return <AlertCircle className=\"w-4 h-4 text-white\" />;\n    case \"warning\":\n      return <AlertTriangle className=\"w-4 h-4 text-white\" />;\n    case \"success\":\n      return <CheckCircle className=\"w-4 h-4 text-white\" />;\n    default:\n      return <AlertCircle className=\"w-4 h-4 text-white\" />;\n  }\n};\n\nconst getIssueStyles = (type: string) => {\n  switch (type) {\n    case \"critical\":\n      return {\n        container: \"bg-red-50 border-l-4 border-red-400\",\n        icon: \"bg-red-500\",\n        title: \"text-red-800\",\n        description: \"text-red-600\",\n        button: \"bg-red-100 hover:bg-red-200 text-red-800\",\n      };\n    case \"warning\":\n      return {\n        container: \"bg-yellow-50 border-l-4 border-yellow-400\",\n        icon: \"bg-yellow-500\",\n        title: \"text-yellow-800\",\n        description: \"text-yellow-600\",\n        button: \"bg-yellow-100 hover:bg-yellow-200 text-yellow-800\",\n      };\n    case \"success\":\n      return {\n        container: \"bg-green-50 border-l-4 border-green-400\",\n        icon: \"bg-green-500\",\n        title: \"text-green-800\",\n        description: \"text-green-600\",\n        button: \"bg-green-100 hover:bg-green-200 text-green-800\",\n      };\n    default:\n      return {\n        container: \"bg-gray-50 border-l-4 border-gray-400\",\n        icon: \"bg-gray-500\",\n        title: \"text-gray-800\",\n        description: \"text-gray-600\",\n        button: \"bg-gray-100 hover:bg-gray-200 text-gray-800\",\n      };\n  }\n};\n\nexport default function SEOIssues() {\n  return (\n    <div className=\"bg-white shadow-sm rounded-lg\">\n      <div className=\"px-6 py-5 border-b border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-900\">SEO Issues & Fixes</h3>\n        <p className=\"text-sm text-gray-500\">Automated SEO analysis and recommendations</p>\n      </div>\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {seoIssues.map((issue) => {\n            const styles = getIssueStyles(issue.type);\n            const icon = getIssueIcon(issue.type);\n            \n            return (\n              <div key={issue.id} className={`flex items-start space-x-4 p-4 rounded-lg ${styles.container}`}>\n                <div className={`w-6 h-6 ${styles.icon} rounded-full flex items-center justify-center flex-shrink-0`}>\n                  {icon}\n                </div>\n                <div className=\"flex-1\">\n                  <p className={`text-sm font-medium ${styles.title}`}>{issue.title}</p>\n                  <p className={`text-xs ${styles.description} mt-1`}>\n                    {issue.website}\n                    {issue.affectedPages > 0 && ` • ${issue.affectedPages} pages affected`}\n                  </p>\n                  <p className={`text-xs ${styles.description} mt-1`}>{issue.description}</p>\n                  {issue.autoFixAvailable && issue.type !== \"success\" && (\n                    <Button\n                      size=\"sm\"\n                      className={`mt-2 text-xs px-2 py-1 h-6 ${styles.button}`}\n                      variant=\"ghost\"\n                    >\n                      Auto-Fix Available\n                    </Button>\n                  )}\n                  {issue.type === \"success\" && (\n                    <div className=\"flex items-center mt-2\">\n                      <span className={`text-xs ${styles.title} flex items-center`}>\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Completed\n                      </span>\n                    </div>\n                  )}\n                </div>\n                {issue.type !== \"success\" && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"text-gray-400 hover:text-gray-600\"\n                  >\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </Button>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5025},"client/src/components/dashboard/stats-card.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  iconColor: string;\n  change?: string;\n  changeType?: \"positive\" | \"negative\" | \"neutral\";\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  icon: Icon, \n  iconColor, \n  change, \n  changeType \n}: StatsCardProps) {\n  return (\n    <div className=\"bg-white overflow-hidden shadow-sm rounded-lg\">\n      <div className=\"p-5\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-shrink-0\">\n            <div className={`w-8 h-8 ${iconColor} rounded-lg flex items-center justify-center`}>\n              <Icon className=\"w-4 h-4 text-white\" />\n            </div>\n          </div>\n          <div className=\"ml-5 w-0 flex-1\">\n            <dl>\n              <dt className=\"text-sm font-medium text-gray-500 truncate\">{title}</dt>\n              <dd className=\"text-lg font-medium text-gray-900 flex items-center\">\n                {value}\n                {change && (\n                  <span className={`ml-2 text-sm flex items-center ${\n                    changeType === \"positive\" ? \"text-green-600\" :\n                    changeType === \"negative\" ? \"text-red-600\" :\n                    \"text-gray-600\"\n                  }`}>\n                    {change}\n                  </span>\n                )}\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1460},"client/src/components/dashboard/websites-table.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Eye, Edit, Trash2, Globe, ShoppingCart, Utensils, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport AddWebsiteForm from \"@/components/forms/add-website-form\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst getWebsiteIcon = (name: string) => {\n  if (name.toLowerCase().includes(\"commerce\") || name.toLowerCase().includes(\"store\")) {\n    return ShoppingCart;\n  }\n  if (name.toLowerCase().includes(\"restaurant\") || name.toLowerCase().includes(\"food\")) {\n    return Utensils;\n  }\n  return Globe;\n};\n\nconst getStatusBadge = (status: string) => {\n  switch (status) {\n    case \"active\":\n      return (\n        <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n          <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full mr-1.5\"></div>\n          Active\n        </Badge>\n      );\n    case \"processing\":\n      return (\n        <Badge className=\"bg-yellow-100 text-yellow-800 hover:bg-yellow-100\">\n          <div className=\"w-1.5 h-1.5 bg-yellow-400 rounded-full mr-1.5\"></div>\n          Processing\n        </Badge>\n      );\n    case \"issues\":\n      return (\n        <Badge className=\"bg-red-100 text-red-800 hover:bg-red-100\">\n          <div className=\"w-1.5 h-1.5 bg-red-400 rounded-full mr-1.5\"></div>\n          Issues\n        </Badge>\n      );\n    default:\n      return (\n        <Badge variant=\"secondary\">\n          <div className=\"w-1.5 h-1.5 bg-gray-400 rounded-full mr-1.5\"></div>\n          {status}\n        </Badge>\n      );\n  }\n};\n\nexport default function WebsitesTable() {\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isAddWebsiteOpen, setIsAddWebsiteOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: websites, isLoading } = useQuery({\n    queryKey: [\"/api/websites\"],\n    queryFn: api.getWebsites,\n  });\n\n  const deleteWebsite = useMutation({\n    mutationFn: api.deleteWebsite,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/websites\"] });\n      toast({\n        title: \"Website Deleted\",\n        description: \"The website has been successfully removed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete website. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white shadow-sm rounded-lg\">\n        <div className=\"px-6 py-5 border-b border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Managed Websites</h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"text-gray-500\">Loading websites...</div>\n        </div>\n      </div>\n    );\n  }\n\n  const filteredWebsites = websites?.filter(website => \n    statusFilter === \"all\" || website.status === statusFilter\n  ) || [];\n\n  const getSeoScoreColor = (score: number) => {\n    if (score >= 80) return \"bg-green-500\";\n    if (score >= 60) return \"bg-yellow-500\";\n    return \"bg-red-500\";\n  };\n\n  return (\n    <div className=\"bg-white shadow-sm rounded-lg\">\n      <div className=\"px-6 py-5 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Managed Websites</h3>\n          <div className=\"flex items-center space-x-2\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"processing\">Processing</SelectItem>\n                <SelectItem value=\"issues\">Issues</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Dialog open={isAddWebsiteOpen} onOpenChange={setIsAddWebsiteOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary-500 hover:bg-primary-600 text-white\">\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  Add Website\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <AddWebsiteForm onSuccess={() => setIsAddWebsiteOpen(false)} />\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Website\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Status\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                SEO Score\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Content\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Last Updated\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {filteredWebsites.map((website) => {\n              const Icon = getWebsiteIcon(website.name);\n              const seoScoreColor = getSeoScoreColor(website.seoScore);\n              \n              return (\n                <tr key={website.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center\">\n                        <Icon className=\"w-5 h-5 text-gray-500\" />\n                      </div>\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium text-gray-900\">{website.name}</div>\n                        <div className=\"text-sm text-gray-500\">{website.url}</div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {getStatusBadge(website.status)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"text-sm font-medium text-gray-900\">{website.seoScore}</div>\n                      <div className=\"ml-2 w-16 bg-gray-200 rounded-full h-2\">\n                        <div \n                          className={`${seoScoreColor} h-2 rounded-full`} \n                          style={{ width: `${website.seoScore}%` }}\n                        />\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {website.contentCount} posts\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {formatDistanceToNow(new Date(website.updatedAt), { addSuffix: true })}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <div className=\"flex space-x-2\">\n                      <button className=\"text-primary-600 hover:text-primary-500\">\n                        <Eye className=\"w-4 h-4\" />\n                      </button>\n                      <button className=\"text-gray-600 hover:text-gray-500\">\n                        <Edit className=\"w-4 h-4\" />\n                      </button>\n                      <button \n                        className=\"text-red-600 hover:text-red-500\"\n                        onClick={() => deleteWebsite.mutate(website.id)}\n                        disabled={deleteWebsite.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        \n        {filteredWebsites.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Globe className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No websites found</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              {statusFilter === \"all\" \n                ? \"Get started by adding your first WordPress website.\"\n                : `No websites with status \"${statusFilter}\" found.`\n              }\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9575},"client/src/components/forms/add-website-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertWebsiteSchema } from \"@shared/schema\";\nimport { api } from \"@/lib/api\";\nimport { z } from \"zod\";\n\nconst formSchema = insertWebsiteSchema.extend({\n  name: z.string().min(1, \"Website name is required\"),\n  url: z.string().url(\"Please enter a valid URL\"),\n  wpApplicationName: z.string().min(1, \"Application name is required\"),\n  wpApplicationPassword: z.string().min(20, \"Application password must be at least 20 characters (WordPress generates 24)\"),\n  wpUsername: z.string().min(1, \"WordPress username is required\"),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AddWebsiteFormProps {\n  onSuccess: () => void;\n}\n\nexport default function AddWebsiteForm({ onSuccess }: AddWebsiteFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    formState: { errors },\n  } = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      aiModel: \"gpt-4o\",\n      autoPosting: false, // Default to manual approval for security\n      requireApproval: true,\n      brandVoice: \"professional\",\n    },\n  });\n\n  const createWebsite = useMutation({\n    mutationFn: api.createWebsite,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/websites\"] });\n      toast({\n        title: \"Website Connected\",\n        description: \"Your WordPress site has been successfully connected.\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message || \"Failed to connect website. Please check your credentials.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createWebsite.mutate(data);\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Add New Website</DialogTitle>\n      </DialogHeader>\n      \n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4 max-h-[70vh] overflow-y-auto px-1\">\n        <div>\n          <Label htmlFor=\"name\">Website Name</Label>\n          <Input\n            id=\"name\"\n            {...register(\"name\")}\n            placeholder=\"My WordPress Site\"\n          />\n          {errors.name && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.name.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"url\">Website URL</Label>\n          <Input\n            id=\"url\"\n            type=\"url\"\n            {...register(\"url\")}\n            placeholder=\"https://example.com\"\n          />\n          {errors.url && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.url.message}</p>\n          )}\n        </div>\n        \n        {/* WordPress Application Password Instructions */}\n        <div className=\"bg-blue-50 dark:bg-blue-950 p-3 sm:p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n          <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2 text-sm sm:text-base\">🔒 Secure WordPress Authentication</h4>\n          <p className=\"text-xs sm:text-sm text-blue-800 dark:text-blue-200 mb-2\">\n            We use WordPress Application Passwords for secure, revokable access without storing your main password.\n          </p>\n          <details className=\"text-xs sm:text-sm text-blue-700 dark:text-blue-300\">\n            <summary className=\"cursor-pointer font-medium mb-2\">How to create an Application Password →</summary>\n            <ol className=\"list-decimal list-inside space-y-1 ml-2 text-xs sm:text-sm\">\n              <li>Log into your WordPress admin dashboard</li>\n              <li>Go to Users → Your Profile</li>\n              <li>Scroll to \"Application Passwords\" section</li>\n              <li>Enter \"AI Content Manager\" as the name</li>\n              <li>Click \"Add New Application Password\"</li>\n              <li>Copy the generated 24-character password immediately</li>\n              <li>Paste it in the form below</li>\n            </ol>\n          </details>\n        </div>\n\n        <div>\n          <Label htmlFor=\"wpApplicationName\">Application Name</Label>\n          <Input\n            id=\"wpApplicationName\"\n            {...register(\"wpApplicationName\")}\n            placeholder=\"AI Content Manager - My Site\"\n          />\n          {errors.wpApplicationName && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.wpApplicationName.message}</p>\n          )}\n        </div>\n        \n        <div>\n          <Label htmlFor=\"wpApplicationPassword\">WordPress Application Password</Label>\n          <Input\n            id=\"wpApplicationPassword\"\n            type=\"password\"\n            {...register(\"wpApplicationPassword\")}\n            placeholder=\"xxxx xxxx xxxx xxxx xxxx xxxx\"\n            className=\"font-mono\"\n          />\n          {errors.wpApplicationPassword && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.wpApplicationPassword.message}</p>\n          )}\n          <p className=\"text-xs text-gray-500 mt-1\">24-character password generated by WordPress</p>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"wpUsername\">WordPress Username</Label>\n          <Input\n            id=\"wpUsername\"\n            {...register(\"wpUsername\")}\n            placeholder=\"your-wp-username\"\n          />\n          {errors.wpUsername && (\n            <p className=\"text-sm text-red-600 mt-1\">{errors.wpUsername.message}</p>\n          )}\n        </div>\n        \n        <div>\n          <Label htmlFor=\"aiModel\">AI Model Preference</Label>\n          <Select\n            value={watch(\"aiModel\")}\n            onValueChange={(value) => setValue(\"aiModel\", value)}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select AI model\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"gpt-4o\">GPT-4</SelectItem>\n              <SelectItem value=\"claude-3\">Claude-3</SelectItem>\n              <SelectItem value=\"auto-select\">Auto-Select</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"brandVoice\">Brand Voice</Label>\n          <Select\n            value={watch(\"brandVoice\") || \"professional\"}\n            onValueChange={(value) => setValue(\"brandVoice\", value)}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select brand voice\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"professional\">Professional</SelectItem>\n              <SelectItem value=\"friendly\">Friendly</SelectItem>\n              <SelectItem value=\"technical\">Technical</SelectItem>\n              <SelectItem value=\"casual\">Casual</SelectItem>\n              <SelectItem value=\"warm\">Warm</SelectItem>\n              <SelectItem value=\"authoritative\">Authoritative</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div>\n          <Label htmlFor=\"targetAudience\">Target Audience</Label>\n          <Input\n            id=\"targetAudience\"\n            {...register(\"targetAudience\")}\n            placeholder=\"e.g., small business owners, developers, shoppers\"\n          />\n        </div>\n        \n        <div className=\"space-y-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"requireApproval\"\n              checked={watch(\"requireApproval\")}\n              onCheckedChange={(checked) => setValue(\"requireApproval\", !!checked)}\n            />\n            <Label htmlFor=\"requireApproval\" className=\"text-sm\">\n              Require manual approval before publishing (Recommended)\n            </Label>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"autoPosting\"\n              checked={watch(\"autoPosting\")}\n              onCheckedChange={(checked) => setValue(\"autoPosting\", !!checked)}\n            />\n            <Label htmlFor=\"autoPosting\" className=\"text-sm\">\n              Enable automatic scheduling (2x per week)\n            </Label>\n          </div>\n        </div>\n        \n        <div className=\"flex flex-col-reverse sm:flex-row space-y-2 space-y-reverse sm:space-y-0 sm:space-x-3 pt-4\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            className=\"w-full sm:flex-1\"\n            onClick={onSuccess}\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            className=\"w-full sm:flex-1 bg-primary-500 hover:bg-primary-600\"\n            disabled={createWebsite.isPending}\n          >\n            {createWebsite.isPending ? \"Connecting...\" : \"Connect Website\"}\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n}\n","size_bytes":9345},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Bell, Plus, Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport AddWebsiteForm from \"@/components/forms/add-website-form\";\nimport { useMobileSidebar } from \"./sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nexport default function Header() {\n  const [isAddWebsiteOpen, setIsAddWebsiteOpen] = useState(false);\n  const { setIsOpen } = useMobileSidebar();\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"relative z-10 flex-shrink-0 flex h-16 bg-white shadow-sm border-b border-gray-200\">\n      {isMobile && (\n        <button \n          onClick={() => setIsOpen(true)}\n          className=\"px-4 border-r border-gray-200 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500 md:hidden\"\n        >\n          <Menu className=\"w-5 h-5\" />\n        </button>\n      )}\n      \n      <div className=\"flex-1 px-4 flex justify-between items-center\">\n        <div className=\"flex-1 flex\">\n          <div className=\"w-full flex md:ml-0\">\n            <label htmlFor=\"search-field\" className=\"sr-only\">Search</label>\n            <div className=\"relative w-full text-gray-400 focus-within:text-gray-600 max-w-lg\">\n              <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\n                <Search className=\"w-5 h-5\" />\n              </div>\n              <Input\n                id=\"search-field\"\n                className=\"block w-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\"\n                placeholder={isMobile ? \"Search...\" : \"Search websites, content, or reports...\"}\n                type=\"search\"\n              />\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"ml-2 sm:ml-4 flex items-center md:ml-6 space-x-2 sm:space-x-4\">\n          <button className=\"relative bg-white p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\">\n            <Bell className=\"w-5 h-5\" />\n            <span className=\"absolute -top-1 -right-1 h-4 w-4 bg-red-500 rounded-full text-xs text-white flex items-center justify-center\">\n              3\n            </span>\n          </button>\n          \n          <Dialog open={isAddWebsiteOpen} onOpenChange={setIsAddWebsiteOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary-500 hover:bg-primary-600 text-white px-2 sm:px-4 py-2 rounded-lg text-sm font-medium flex items-center space-x-1 sm:space-x-2\">\n                <Plus className=\"w-4 h-4\" />\n                {!isMobile && <span>Add Website</span>}\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md mx-4 sm:mx-auto\">\n              <AddWebsiteForm onSuccess={() => setIsAddWebsiteOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3185},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Rocket, \n  Globe, \n  Bot, \n  Search, \n  Calendar, \n  BarChart3, \n  History, \n  Settings,\n  X\n} from \"lucide-react\";\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\nimport { useState, createContext, useContext } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\n// Mobile sidebar context\nconst MobileSidebarContext = createContext<{\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n}>({ isOpen: false, setIsOpen: () => {} });\n\nexport const useMobileSidebar = () => useContext(MobileSidebarContext);\n\nexport function MobileSidebarProvider({ children }: { children: React.ReactNode }) {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <MobileSidebarContext.Provider value={{ isOpen, setIsOpen }}>\n      {children}\n    </MobileSidebarContext.Provider>\n  );\n}\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: BarChart3 },\n  { name: \"Websites\", href: \"/websites\", icon: Globe },\n  { name: \"AI Content\", href: \"/ai-content\", icon: Bot },\n  { name: \"SEO Analysis\", href: \"/seo-analysis\", icon: Search },\n  { name: \"Content Schedule\", href: \"/content-schedule\", icon: Calendar },\n  { name: \"Reports\", href: \"/reports\", icon: BarChart3 },\n  { name: \"Activity Logs\", href: \"/activity-logs\", icon: History },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\n// Shared sidebar content component\nfunction SidebarContent({ onLinkClick }: { onLinkClick?: () => void }) {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Logo */}\n      <div className=\"flex items-center flex-shrink-0 px-4 pt-5\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary-500 rounded-lg flex items-center justify-center\">\n            <Rocket className=\"w-4 h-4 text-white\" />\n          </div>\n          <h1 className=\"text-xl font-bold text-gray-900\">WP AI Manager</h1>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"mt-8 flex-1 px-2 space-y-1\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          const Icon = item.icon;\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <a \n                onClick={onLinkClick}\n                className={cn(\n                  \"group flex items-center px-2 py-2 text-sm font-medium rounded-md\",\n                  isActive\n                    ? \"bg-primary-50 border-r-4 border-primary-500 text-primary-700\"\n                    : \"text-gray-600 hover:bg-gray-50 hover:text-gray-900\"\n                )}\n              >\n                <Icon className={cn(\n                  \"mr-3 h-4 w-4\",\n                  isActive \n                    ? \"text-primary-500\" \n                    : \"text-gray-400 group-hover:text-gray-500\"\n                )} />\n                {item.name}\n              </a>\n            </Link>\n          );\n        })}\n      </nav>\n      \n      {/* User Profile */}\n      <div className=\"flex-shrink-0 flex border-t border-gray-200 p-4\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-primary-500 rounded-full flex items-center justify-center\">\n            <span className=\"text-white text-sm font-medium\">JD</span>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm font-medium text-gray-700\">John Doe</p>\n            <p className=\"text-xs text-gray-500\">Pro Plan</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Sidebar() {\n  const isMobile = useIsMobile();\n  const { isOpen, setIsOpen } = useMobileSidebar();\n\n  // Desktop sidebar\n  if (!isMobile) {\n    return (\n      <div className=\"hidden md:flex md:flex-shrink-0\">\n        <div className=\"flex flex-col w-64\">\n          <div className=\"flex flex-col flex-grow pb-4 overflow-y-auto bg-white border-r border-gray-200\">\n            <SidebarContent />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Mobile sidebar (Sheet)\n  return (\n    <Sheet open={isOpen} onOpenChange={setIsOpen}>\n      <SheetContent side=\"left\" className=\"p-0 w-64\">\n        <div className=\"flex flex-col h-full bg-white\">\n          <SidebarContent onLinkClick={() => setIsOpen(false)} />\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":4399},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}